#line 2 "scanner.cpp"

#line 4 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
FILE *yy_input_file;

char *yy_ch_buf;		/* input buffer */
char *yy_buf_pos;		/* current position in input buffer */

/* Size of input buffer in bytes, not including room for EOB
 * characters.
 */
yy_size_t yy_buf_size;

/* Number of characters read into yy_ch_buf, not including EOB
 * characters.
 */
int yy_n_chars;

/* Whether we "own" the buffer - i.e., we know we created it,
 * and can realloc() it to grow it, and should free() it to
 * delete it.
 */
int yy_is_our_buffer;

/* Whether this is an "interactive" input source; if so, and
 * if we're using stdio for input, then we want to use getc()
 * instead of fread(), to make sure we stop fetching input after
 * each newline.
 */
int yy_is_interactive;

/* Whether we're considered to be at the beginning of a line.
 * If so, '^' rules will be active on the next match, otherwise
 * not.
 */
int yy_at_bol;

int yy_bs_lineno; /**< The line count. */
int yy_bs_column; /**< The column count. */

/* Whether to try to fill the input buffer when we reach the
 * end of it.
 */
int yy_fill_buffer;

int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
 */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 106
#define YY_END_OF_BUFFER 107
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
flex_int32_t yy_verify;
flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[579] =
{
0,
0,    0,    0,    0,  107,  105,  103,  104,   73,  105,
2,   40,   45,   46,  105,   79,   84,   43,   41,   82,
42,   83,   44,   93,   92,   88,   87,   70,   72,   71,
89,   80,   85,   48,  105,   89,   89,   89,   89,   89,
89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
81,   47,   86,    5,    5,    7,    5,    5,    2,    5,
5,    5,    5,    5,    5,    6,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

5,  103,   74,    0,   91,    0,    2,   56,   63,   57,
51,    0,    0,   54,   67,   52,   68,   53,   66,    0,
95,    3,    1,   55,   95,   93,    0,    0,    0,   96,
92,   77,   65,   49,   75,   69,   76,   50,   89,   59,
0,   90,   89,   89,   89,   89,   89,   89,   89,   89,
89,   89,   89,   89,   89,   89,   26,   89,   89,   89,
89,   89,   89,   89,   89,   89,   58,   64,    5,    5,
5,    5,    5,    5,    2,    5,    5,    5,    5,    5,
5,    4,    5,    5,    5,    5,    5,    5,    5,    1,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,   91,    0,    0,    0,    0,
0,    0,   62,   97,   97,    0,    0,    0,    0,    0,
78,    0,    1,   95,    0,    0,   95,   94,   60,   61,
89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
20,   89,   89,   89,   89,   89,   89,   89,   30,   89,
89,   89,   89,   89,   89,   89,   89,   39,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

5,    5,    5,    5,    5,    1,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    0,    0,    0,    0,   98,    0,    0,    0,    0,
0,   95,    0,   95,   89,   10,   89,   12,   89,   89,
89,   89,   89,   18,   89,   89,   22,   89,   24,   25,
27,   89,   89,   31,   32,   89,   89,   89,   89,   89,
38,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    0,    0,    0,    0,    0,    0,   89,   89,   11,
89,   89,   15,   89,   89,   89,   89,   89,   89,   89,
33,   89,   89,   89,   89,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    0,
0,   99,    0,    0,  100,    8,   89,   13,   89,   89,
89,   89,   89,   23,   89,   89,   89,   35,   36,   37,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    0,    0,    0,   89,   89,   89,   17,   89,   21,
89,   89,   89,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    0,    0,  101,    9,   89,
16,   89,   28,   89,   34,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    0,    0,   14,   89,   29,
5,    5,    5,    5,    5,    0,    0,   89,    5,    5,
5,    0,   19,    5,    5,  102,    5,    0
} ;

static yyconst flex_int32_t yy_ec[256] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
20,   20,   20,   20,   20,   21,   21,   22,   23,   24,
25,   26,    1,    1,   27,   27,   27,   27,   28,   27,
29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
29,   29,   29,   29,   30,   29,   29,   31,   29,   29,
32,   33,   34,   35,   29,   36,   37,   38,   39,   40,

41,   42,   43,   44,   45,   29,   46,   47,   48,   49,
50,   51,   29,   52,   53,   54,   55,   56,   57,   58,
59,   29,   60,   61,   62,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1
} ;

static yyconst flex_int32_t yy_meta[63] =
{
0,
1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
1,    1,    4,    1,    1,    1,    1,    1,    5,    5,
5,    1,    1,    1,    1,    1,    5,    5,    6,    6,
6,    1,    1,    1,    1,    1,    5,    5,    5,    5,
5,    5,    6,    6,    6,    6,    6,    6,    6,    6,
6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
1,    1
} ;

static yyconst flex_int16_t yy_base[606] =
{
0,
0,    0,   62,    0, 1074, 1736, 1071, 1736, 1047,  120,
0, 1736, 1046,  117, 1028, 1736, 1736, 1035,  113, 1736,
114,  112,  123,  126,  141, 1034, 1736,  139, 1033,  109,
0, 1736, 1736, 1032, 1020, 1016,   92,  122, 1013, 1004,
128,  127, 1009,  107, 1012,  993,  133,  119,  988, 1000,
1736,  126, 1736,    0, 1034, 1736, 1010,  176, 1021,    0,
1008,  166,  175,    0,    0,  172,  178,    0,  179,  179,
188,  195,  200, 1007,    0,  186, 1006,  168,  253,    0,
0, 1005,  230,  988,  173,  185,  985,  978,  187,  189,
983,  185,  986,  958,  207,  192,  953,  974,    0,  291,

0, 1008, 1736,  312, 1736,  348,    0, 1736, 1736, 1736,
984,  998,  397, 1736, 1736, 1736, 1736, 1736, 1736,  990,
299, 1736,    0, 1736,  302,  314,  329,  342,    0, 1736,
391, 1736, 1736,  981, 1736, 1736, 1736,  978,    0, 1736,
966, 1736,  947,  951,  958,  936,  951,  183,  945,  933,
938,  932,  934,  928,  925,  941,    0,  283,  926,  203,
927,  287,  923,  920,  913,  911, 1736, 1736,    0,  960,
0,  366,    0,  453,  948,    0,    0,    0,  935,  949,
502, 1736,    0,    0,    0,    0,    0,  941,  368,  942,
0,  373,  403,  440,  455,  542,    0,  496,    0,    0,

929,    0,    0,    0,  928,    0,    0,  362,    0,  898,
902,  905,  892,  907,  203,  901,  889,  894,  888,  890,
884,  883,  899,    0,  319,  884,  279,  883,  323,  879,
885,  878,  876,    0,    0,  333,  421,  580,    0,  349,
604,  628, 1736, 1736,  910,  364,    0,  908,    0,    0,
1736,  468,    0,  473,  509,  443,  458,    0, 1736, 1736,
871,  875,  877,  872,  861,  858,  375,  871,  866,  859,
855,  856,  840,  843,  841,  837,  836,  848,    0,  839,
841,  841,  844,  827,  817,  817,  829,    0,  493,  533,
668,    0,  542,  692,  716,    0,    0,  859,  418,  740,

858,  764,  788,    0,  557,  854,  569,  614,  529,  584,
812,    0,    0,  821,  825,  825,  820,  811,  808,  389,
821,  807,  800,  805,  806,  790,  793,  791,  787,  784,
796,    0,  789,  791,  791,  785,  768,  767,  767,  779,
0,  607,  836,  860,  884, 1736,  480,    0,    0,    0,
572,  617,  575,  631,  365,    0,  773,    0,  775,  767,
760,  768,  757,    0,  757,  765,    0,  759,    0,    0,
0,  762,  746,    0,    0,  756,  742,  743,  755,  754,
0,  914,  929,  953,  977,    0,  500, 1001, 1025, 1049,
638,  658,  663,  671,  454,    0,  744,    0,  746,  738,

733,  741,  721,    0,  721,  729,    0,  732,    0,    0,
0,  735,  719,    0,    0,  729,  715,  714,  726,  725,
0, 1073, 1097,  753,    0,    0,  752,  703,  714,    0,
709,  700,    0,  699,  700,  702,  702,  690,  692,  698,
0,  694,  689,  674,  683, 1121, 1145,  716, 1169, 1193,
715,  675,  686,    0,  681,  672,    0,  669,  670,  671,
671,  652,  653,  658,    0,  654,  649,  643,  650, 1217,
1241, 1736,    0,    0, 1736,    0,  639,    0,  645,  630,
626,  623,  625,    0,  633,  627,  613,    0,    0,    0,
1265, 1289,    0, 1313, 1337,    0,    0,  607,    0,  619,

599,  599,  587,  567,    0,  576,  574,  559,    0,    0,
0, 1361,    0,  596,  561,  549,  546,    0,  536,    0,
533,  533,  519, 1385, 1409,  557,  524,  515,  518,    0,
493,    0,  501,  495,  484, 1433,    0, 1736,    0,  477,
0,  472,    0,  456,    0, 1457, 1481,    0,    0,  426,
0,  415,    0,  426,    0, 1505,    0,    0,  422,    0,
1529, 1553,    0,  407,    0, 1577,    0,  403, 1601, 1625,
401,  423,    0,  415,    0, 1736,    0, 1736, 1667, 1673,
1679, 1681, 1687, 1693, 1699, 1705, 1711, 1717, 1723,  400,
1729,  390,  386,  375,  371,  346,  334,  324,  320,  242,

233,  202,  175,  145,  123
} ;

static yyconst flex_int16_t yy_def[606] =
{
0,
578,    1,  578,    3,  578,  578,  578,  578,  578,  579,
580,  578,  578,  578,  581,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
582,  578,  578,  578,  583,  582,  582,  582,  582,  582,
582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
578,  578,  578,  584,  584,  578,  584,  585,  586,  584,
584,  584,  587,  584,  584,  578,  584,  584,  584,  584,
584,  584,  584,  584,  584,  584,  584,  584,  578,  584,
584,  584,  588,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,  584,  584,

584,  578,  578,  579,  578,  579,  580,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  589,  578,  578,  578,  578,  578,  590,  578,
578,  578,  578,  578,  578,  578,  578,  578,  582,  578,
583,  578,  582,  582,  582,  582,  582,  582,  582,  582,
582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
582,  582,  582,  582,  582,  582,  578,  578,  584,  584,
584,  585,  584,  585,  586,  584,  584,  584,  584,  584,
584,  578,  584,  584,  584,  584,  584,  584,  584,  591,
584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

584,  584,  584,  584,  584,   79,  584,  588,  584,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,  584,  584,  579,  579,  579,  106,  579,
238,  238,  578,  578,  578,  578,  592,  578,  593,  594,
578,  578,  589,  578,  578,  578,  578,  590,  578,  578,
582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
582,  582,  582,  582,  582,  582,  582,  582,  585,  585,
585,  174,  585,  291,  291,  584,  584,  584,  584,  584,

584,  584,  584,  584,  584,  591,  584,  584,  584,  584,
584,  584,  584,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,  579,  238,  238,  238,  578,  578,  595,  596,  597,
578,  578,  578,  578,  582,  582,  582,  582,  582,  582,
582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
582,  585,  291,  291,  291,  584,  584,  584,  584,  584,
584,  584,  584,  584,   79,   79,   79,   79,   79,   79,

79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,  238,  238,  578,  598,  599,  578,  582,  582,  582,
582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
582,  582,  582,  582,  582,  291,  291,  584,  584,  584,
584,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,  238,
238,  578,  600,  601,  578,  582,  582,  582,  582,  582,
582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
291,  291,  584,  584,  584,  584,   79,   79,   79,   79,

79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,  238,  602,  578,  582,  582,  582,  582,  582,  582,
582,  582,  582,  291,  584,  584,   79,   79,   79,   79,
79,   79,   79,   79,   79,  238,  603,  578,  582,  582,
582,  582,  582,  582,  582,  291,  584,  584,   79,   79,
79,   79,   79,   79,   79,  238,  604,  582,  582,  582,
291,  584,   79,   79,   79,  238,  605,  582,  291,  584,
79,  578,  582,  584,   79,  578,  584,    0,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,

578,  578,  578,  578,  578
} ;

static yyconst flex_int16_t yy_nxt[1799] =
{
0,
6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
25,   26,   27,   28,   29,   30,   31,   31,   31,   31,
31,   32,    6,   33,   34,   35,   36,   37,   38,   39,
40,   41,   42,   43,   44,   31,   31,   45,   31,   31,
46,   47,   48,   49,   31,   50,   31,   31,   31,   51,
52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
72,   73,   73,   74,   75,   76,   77,   78,   79,   79,
79,   79,   79,   80,   54,   81,   82,   83,   84,   85,

86,   87,   88,   89,   90,   91,   92,   79,   79,   93,
79,   79,   94,   95,   96,   97,   79,   98,   79,   79,
79,   99,  100,  101,  105,  109,  115,  572,  120,  117,
121,  121,  121,  137,  138,  122,  144,  116,  118,  119,
123,  110,  125,  145,  126,  126,  127,  124,  157,  567,
167,  111,  106,  128,  133,  158,  129,  125,  146,  131,
131,  131,  134,  135,  151,  147,  128,  154,  128,  161,
130,  148,  163,  162,  177,  164,  155,  152,  104,  557,
173,  128,  153,  129,  169,  130,  168,  112,  104,  182,
178,  183,  204,  205,  185,  188,  114,  189,  189,  189,

179,  200,  184,  186,  187,  190,  537,  181,  174,  201,
202,  192,  191,  193,  193,  194,  192,  211,  198,  198,
198,  213,  195,  218,  212,  196,  224,  195,  214,  221,
266,  267,  141,  225,  215,  195,  219,  514,  222,  197,
195,  220,  141,  228,  197,  230,  513,  229,  231,  280,
319,  320,  196,  169,  169,  281,  169,  169,  169,  169,
169,  169,  169,  169,  169,  209,  169,  169,  169,  169,
169,  206,  206,  206,  169,  169,  169,  169,  169,  206,
206,  206,  206,  206,  169,  169,  169,  169,  169,  206,
206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
206,  206,  169,  169,  169,  234,  105,  121,  121,  121,
254,  254,  254,  283,  474,  333,  252,  276,  473,  255,
125,  334,  126,  126,  127,  277,  278,  105,  427,  252,
284,  128,  255,  130,  106,  125,  130,  127,  127,  127,
426,  235,  236,  105,  128,  256,  128,  256,  130,  336,
257,  257,  257,  329,  141,  106,  237,  237,  104,  128,
173,  330,  331,  130,  141,  425,  337,  238,  104,  350,
239,  106,  347,  347,  240,  240,  189,  189,  189,  240,
349,  307,  307,  307,  348,  305,  240,  209,  174,  240,

308,  240,  241,  240,  258,  242,  245,  125,  305,  131,
131,  131,  197,  308,  428,  246,  246,  197,  128,  192,
429,  193,  193,  194,  577,  105,  247,  361,  362,  248,
195,  128,  576,  248,  248,  130,  387,  387,  248,  342,
342,  401,  402,  195,  575,  248,  573,  197,  248,  571,
248,  249,  248,  106,  250,  104,  192,  289,  194,  194,
194,  257,  257,  257,  568,  104,  565,  195,  309,  564,
309,  290,  290,  310,  310,  310,  257,  257,  257,  563,
195,  351,  291,  351,  197,  292,  352,  352,  352,  293,
293,  254,  254,  254,  293,  104,  560,  173,  424,  424,

255,  293,  130,  452,  293,  104,  293,  294,  293,  453,
295,  298,  192,  255,  198,  198,  198,  130,  448,  448,
299,  299,  353,  195,  353,  174,  559,  354,  354,  354,
558,  300,  555,  554,  301,  104,  195,  173,  301,  301,
197,  553,  552,  301,  104,  104,  173,  310,  310,  310,
301,  382,  382,  301,  104,  301,  302,  301,  551,  303,
311,  311,  311,  550,  549,  174,  548,  545,  311,  311,
391,  544,  391,  543,  174,  392,  392,  392,  311,  311,
311,  311,  311,  311,  105,  542,  541,  307,  307,  307,
352,  352,  352,  354,  354,  354,  308,  540,  343,  343,

343,  539,  310,  310,  310,  538,  343,  343,  535,  308,
534,  105,  106,  197,  533,  532,  343,  343,  343,  343,
343,  343,  344,  344,  344,  240,  240,  393,  197,  393,
344,  344,  394,  394,  394,  352,  352,  352,  531,  106,
344,  344,  344,  344,  344,  344,  345,  345,  345,  354,
354,  354,  530,  529,  345,  345,  392,  392,  392,  528,
527,  130,  523,  522,  345,  345,  345,  345,  345,  345,
104,  521,  173,  520,  519,  130,  392,  392,  392,  518,
104,  394,  394,  394,  517,  516,  383,  383,  383,  394,
394,  394,  515,  511,  383,  383,  510,  509,  508,  507,

174,  506,  197,  505,  383,  383,  383,  383,  383,  383,
384,  384,  384,  504,  503,  197,  502,  501,  384,  384,
500,  499,  498,  497,  496,  493,  490,  489,  384,  384,
384,  384,  384,  384,  385,  385,  385,  488,  487,  486,
485,  484,  385,  385,  483,  482,  481,  480,  479,  478,
477,  476,  385,  385,  385,  385,  385,  385,  388,  388,
388,  475,  472,  469,  468,  467,  388,  388,  466,  465,
464,  463,  462,  461,  460,  459,  388,  388,  388,  388,
388,  388,  389,  389,  389,  458,  457,  456,  455,  454,
389,  389,  445,  444,  443,  442,  441,  440,  439,  438,

389,  389,  389,  389,  389,  389,  390,  390,  390,  437,
436,  435,  434,  433,  390,  390,  432,  431,  430,  421,
420,  419,  418,  417,  390,  390,  390,  390,  390,  390,
311,  311,  311,  416,  415,  414,  413,  412,  311,  311,
411,  410,  409,  408,  407,  406,  405,  404,  311,  311,
311,  311,  311,  311,  422,  422,  422,  403,  400,  399,
398,  397,  422,  422,  396,  395,  253,  386,  386,  381,
380,  379,  422,  422,  422,  422,  422,  422,  423,  423,
423,  378,  377,  376,  375,  374,  423,  423,  373,  372,
371,  370,  369,  368,  367,  366,  423,  423,  423,  423,

423,  423,  240,  240,  240,  365,  364,  363,  360,  359,
240,  240,  358,  357,  356,  355,  104,  346,  173,  346,
240,  240,  240,  240,  240,  240,  104,  341,  340,  339,
338,  335,  293,  293,  332,  328,  327,  326,  325,  324,
323,  322,  321,  318,  317,  316,  174,  446,  446,  446,
315,  314,  313,  312,  253,  446,  446,  304,  297,  296,
107,  170,  288,  287,  286,  446,  446,  446,  446,  446,
446,  447,  447,  447,  285,  282,  279,  275,  274,  447,
447,  273,  272,  271,  270,  269,  268,  265,  264,  447,
447,  447,  447,  447,  447,  293,  293,  293,  263,  262,

261,  142,  260,  293,  293,  259,  251,  244,  243,  102,
233,  232,  227,  293,  293,  293,  293,  293,  293,  449,
449,  449,  226,  223,  217,  216,  210,  449,  449,  207,
203,  199,  176,  107,  171,  170,  166,  449,  449,  449,
449,  449,  449,  450,  450,  450,  165,  160,  159,  156,
150,  450,  450,  149,  143,  142,  140,  136,  132,  114,
113,  450,  450,  450,  450,  450,  450,  451,  451,  451,
108,  103,  102,  578,  578,  451,  451,  578,  578,  578,
578,  578,  578,  578,  578,  451,  451,  451,  451,  451,
451,  470,  470,  470,  578,  578,  578,  578,  578,  470,

470,  578,  578,  578,  578,  578,  578,  578,  578,  470,
470,  470,  470,  470,  470,  471,  471,  471,  578,  578,
578,  578,  578,  471,  471,  578,  578,  578,  578,  578,
578,  578,  578,  471,  471,  471,  471,  471,  471,  491,
491,  491,  578,  578,  578,  578,  578,  491,  491,  578,
578,  578,  578,  578,  578,  578,  578,  491,  491,  491,
491,  491,  491,  492,  492,  492,  578,  578,  578,  578,
578,  492,  492,  578,  578,  578,  578,  578,  578,  578,
578,  492,  492,  492,  492,  492,  492,  494,  494,  494,
578,  578,  578,  578,  578,  494,  494,  578,  578,  578,

578,  578,  578,  578,  578,  494,  494,  494,  494,  494,
494,  495,  495,  495,  578,  578,  578,  578,  578,  495,
495,  578,  578,  578,  578,  578,  578,  578,  578,  495,
495,  495,  495,  495,  495,  512,  512,  512,  578,  578,
578,  578,  578,  512,  512,  578,  578,  578,  578,  578,
578,  578,  578,  512,  512,  512,  512,  512,  512,  240,
240,  240,  578,  578,  578,  578,  578,  240,  240,  578,
578,  578,  578,  578,  578,  578,  578,  240,  240,  240,
240,  240,  240,  524,  524,  524,  578,  578,  578,  578,
578,  524,  524,  578,  578,  578,  578,  578,  578,  578,

578,  524,  524,  524,  524,  524,  524,  293,  293,  293,
578,  578,  578,  578,  578,  293,  293,  578,  578,  578,
578,  578,  578,  578,  578,  293,  293,  293,  293,  293,
293,  525,  525,  525,  578,  578,  578,  578,  578,  525,
525,  578,  578,  578,  578,  578,  578,  578,  578,  525,
525,  525,  525,  525,  525,  526,  526,  526,  578,  578,
578,  578,  578,  526,  526,  578,  578,  578,  578,  578,
578,  578,  578,  526,  526,  526,  526,  526,  526,  536,
536,  536,  578,  578,  578,  578,  578,  536,  536,  578,
578,  578,  578,  578,  578,  578,  578,  536,  536,  536,

536,  536,  536,  546,  546,  546,  578,  578,  578,  578,
578,  546,  546,  578,  578,  578,  578,  578,  578,  578,
578,  546,  546,  546,  546,  546,  546,  547,  547,  547,
578,  578,  578,  578,  578,  547,  547,  578,  578,  578,
578,  578,  578,  578,  578,  547,  547,  547,  547,  547,
547,  556,  556,  556,  578,  578,  578,  578,  578,  556,
556,  578,  578,  578,  578,  578,  578,  578,  578,  556,
556,  556,  556,  556,  556,  561,  561,  561,  578,  578,
578,  578,  578,  561,  561,  578,  578,  578,  578,  578,
578,  578,  578,  561,  561,  561,  561,  561,  561,  562,

562,  562,  578,  578,  578,  578,  578,  562,  562,  578,
578,  578,  578,  578,  578,  578,  578,  562,  562,  562,
562,  562,  562,  566,  566,  566,  578,  578,  578,  578,
578,  566,  566,  578,  578,  578,  578,  578,  578,  578,
578,  566,  566,  566,  566,  566,  566,  569,  569,  569,
578,  578,  578,  578,  578,  569,  569,  578,  578,  578,
578,  578,  578,  578,  578,  569,  569,  569,  569,  569,
569,  570,  570,  570,  578,  578,  578,  578,  578,  570,
570,  578,  578,  578,  578,  578,  578,  578,  578,  570,
570,  570,  570,  570,  570,  240,  240,  240,  578,  578,

578,  578,  578,  240,  240,  578,  578,  578,  578,  578,
578,  578,  578,  240,  240,  240,  240,  240,  240,  293,
293,  293,  578,  578,  578,  578,  578,  293,  293,  578,
578,  578,  578,  578,  578,  578,  578,  293,  293,  293,
293,  293,  293,  574,  574,  574,  578,  578,  578,  578,
578,  574,  574,  578,  578,  578,  578,  578,  578,  578,
578,  574,  574,  574,  574,  574,  574,  104,  104,  104,
104,  104,  104,  107,  578,  107,  107,  107,  107,  112,
578,  578,  112,  112,  112,  139,  139,  141,  141,  141,
141,  141,  141,  169,  578,  169,  578,  169,  169,  172,

172,  172,  172,  172,  172,  175,  578,  175,  175,  175,
175,  180,  578,  180,  180,  180,  180,  208,  208,  208,
208,  208,  208,  253,  578,  253,  253,  253,  253,  306,
578,  306,  306,  306,  306,    5,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578

} ;

static yyconst flex_int16_t yy_chk[1799] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
3,    3,    3,    3,   10,   14,   19,  605,   22,   21,
22,   22,   22,   30,   30,   23,   37,   19,   21,   21,
23,   14,   24,   37,   24,   24,   24,   23,   44,  604,
52,   14,   10,   24,   28,   44,   24,   25,   38,   25,
25,   25,   28,   28,   41,   38,   24,   42,   25,   47,
24,   38,   48,   47,   62,   48,   42,   41,   58,  603,
58,   25,   41,   24,   63,   25,   52,   63,   58,   66,
62,   67,   78,   78,   69,   70,   66,   70,   70,   70,

62,   76,   67,   69,   69,   71,  602,   63,   58,   76,
76,   72,   71,   72,   72,   72,   73,   85,   73,   73,
73,   86,   72,   89,   85,   72,   92,   73,   86,   90,
148,  148,   83,   92,   86,   72,   89,  601,   90,   72,
73,   89,   83,   95,   73,   96,  600,   95,   96,  160,
215,  215,   72,   79,   79,  160,   79,   79,   79,   79,
79,   79,   79,   79,   79,   83,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,  100,  104,  121,  121,  121,
125,  125,  125,  162,  599,  227,  121,  158,  598,  125,
126,  227,  126,  126,  126,  158,  158,  236,  597,  121,
162,  126,  125,  121,  104,  127,  125,  127,  127,  127,
596,  100,  106,  240,  126,  128,  127,  128,  126,  229,
128,  128,  128,  225,  208,  236,  106,  106,  172,  127,
172,  225,  225,  127,  208,  595,  229,  106,  172,  594,
106,  240,  246,  246,  106,  106,  189,  189,  189,  106,
593,  192,  192,  192,  592,  189,  106,  208,  172,  106,

192,  106,  106,  106,  590,  106,  113,  131,  189,  131,
131,  131,  189,  192,  355,  113,  113,  192,  131,  193,
355,  193,  193,  193,  574,  237,  113,  267,  267,  113,
193,  131,  572,  113,  113,  131,  299,  299,  113,  237,
237,  320,  320,  193,  571,  113,  568,  193,  113,  564,
113,  113,  113,  237,  113,  174,  194,  174,  194,  194,
194,  256,  256,  256,  559,  174,  554,  194,  195,  552,
195,  174,  174,  195,  195,  195,  257,  257,  257,  550,
194,  252,  174,  252,  194,  174,  252,  252,  252,  174,
174,  254,  254,  254,  174,  289,  544,  289,  347,  347,

254,  174,  257,  395,  174,  289,  174,  174,  174,  395,
174,  181,  198,  254,  198,  198,  198,  254,  387,  387,
181,  181,  255,  198,  255,  289,  542,  255,  255,  255,
540,  181,  535,  534,  181,  290,  198,  290,  181,  181,
198,  533,  531,  181,  293,  290,  293,  309,  309,  309,
181,  290,  290,  181,  293,  181,  181,  181,  529,  181,
196,  196,  196,  528,  527,  290,  526,  523,  196,  196,
305,  522,  305,  521,  293,  305,  305,  305,  196,  196,
196,  196,  196,  196,  238,  519,  517,  307,  307,  307,
351,  351,  351,  353,  353,  353,  307,  516,  238,  238,

238,  515,  310,  310,  310,  514,  238,  238,  508,  307,
507,  342,  238,  307,  506,  504,  238,  238,  238,  238,
238,  238,  241,  241,  241,  342,  342,  308,  310,  308,
241,  241,  308,  308,  308,  352,  352,  352,  503,  342,
241,  241,  241,  241,  241,  241,  242,  242,  242,  354,
354,  354,  502,  501,  242,  242,  391,  391,  391,  500,
498,  352,  487,  486,  242,  242,  242,  242,  242,  242,
291,  485,  291,  483,  482,  354,  392,  392,  392,  481,
291,  393,  393,  393,  480,  479,  291,  291,  291,  394,
394,  394,  477,  469,  291,  291,  468,  467,  466,  464,

291,  463,  392,  462,  291,  291,  291,  291,  291,  291,
294,  294,  294,  461,  460,  394,  459,  458,  294,  294,
456,  455,  453,  452,  451,  448,  445,  444,  294,  294,
294,  294,  294,  294,  295,  295,  295,  443,  442,  440,
439,  438,  295,  295,  437,  436,  435,  434,  432,  431,
429,  428,  295,  295,  295,  295,  295,  295,  300,  300,
300,  427,  424,  420,  419,  418,  300,  300,  417,  416,
413,  412,  408,  406,  405,  403,  300,  300,  300,  300,
300,  300,  302,  302,  302,  402,  401,  400,  399,  397,
302,  302,  380,  379,  378,  377,  376,  373,  372,  368,

302,  302,  302,  302,  302,  302,  303,  303,  303,  366,
365,  363,  362,  361,  303,  303,  360,  359,  357,  340,
339,  338,  337,  336,  303,  303,  303,  303,  303,  303,
311,  311,  311,  335,  334,  333,  331,  330,  311,  311,
329,  328,  327,  326,  325,  324,  323,  322,  311,  311,
311,  311,  311,  311,  343,  343,  343,  321,  319,  318,
317,  316,  343,  343,  315,  314,  306,  301,  298,  287,
286,  285,  343,  343,  343,  343,  343,  343,  344,  344,
344,  284,  283,  282,  281,  280,  344,  344,  278,  277,
276,  275,  274,  273,  272,  271,  344,  344,  344,  344,

344,  344,  345,  345,  345,  270,  269,  268,  266,  265,
345,  345,  264,  263,  262,  261,  382,  248,  382,  245,
345,  345,  345,  345,  345,  345,  382,  233,  232,  231,
230,  228,  382,  382,  226,  223,  222,  221,  220,  219,
218,  217,  216,  214,  213,  212,  382,  383,  383,  383,
211,  210,  205,  201,  190,  383,  383,  188,  180,  179,
175,  170,  166,  165,  164,  383,  383,  383,  383,  383,
383,  384,  384,  384,  163,  161,  159,  156,  155,  384,
384,  154,  153,  152,  151,  150,  149,  147,  146,  384,
384,  384,  384,  384,  384,  385,  385,  385,  145,  144,

143,  141,  138,  385,  385,  134,  120,  112,  111,  102,
98,   97,   94,  385,  385,  385,  385,  385,  385,  388,
388,  388,   93,   91,   88,   87,   84,  388,  388,   82,
77,   74,   61,   59,   57,   55,   50,  388,  388,  388,
388,  388,  388,  389,  389,  389,   49,   46,   45,   43,
40,  389,  389,   39,   36,   35,   34,   29,   26,   18,
15,  389,  389,  389,  389,  389,  389,  390,  390,  390,
13,    9,    7,    5,    0,  390,  390,    0,    0,    0,
0,    0,    0,    0,    0,  390,  390,  390,  390,  390,
390,  422,  422,  422,    0,    0,    0,    0,    0,  422,

422,    0,    0,    0,    0,    0,    0,    0,    0,  422,
422,  422,  422,  422,  422,  423,  423,  423,    0,    0,
0,    0,    0,  423,  423,    0,    0,    0,    0,    0,
0,    0,    0,  423,  423,  423,  423,  423,  423,  446,
446,  446,    0,    0,    0,    0,    0,  446,  446,    0,
0,    0,    0,    0,    0,    0,    0,  446,  446,  446,
446,  446,  446,  447,  447,  447,    0,    0,    0,    0,
0,  447,  447,    0,    0,    0,    0,    0,    0,    0,
0,  447,  447,  447,  447,  447,  447,  449,  449,  449,
0,    0,    0,    0,    0,  449,  449,    0,    0,    0,

0,    0,    0,    0,    0,  449,  449,  449,  449,  449,
449,  450,  450,  450,    0,    0,    0,    0,    0,  450,
450,    0,    0,    0,    0,    0,    0,    0,    0,  450,
450,  450,  450,  450,  450,  470,  470,  470,    0,    0,
0,    0,    0,  470,  470,    0,    0,    0,    0,    0,
0,    0,    0,  470,  470,  470,  470,  470,  470,  471,
471,  471,    0,    0,    0,    0,    0,  471,  471,    0,
0,    0,    0,    0,    0,    0,    0,  471,  471,  471,
471,  471,  471,  491,  491,  491,    0,    0,    0,    0,
0,  491,  491,    0,    0,    0,    0,    0,    0,    0,

0,  491,  491,  491,  491,  491,  491,  492,  492,  492,
0,    0,    0,    0,    0,  492,  492,    0,    0,    0,
0,    0,    0,    0,    0,  492,  492,  492,  492,  492,
492,  494,  494,  494,    0,    0,    0,    0,    0,  494,
494,    0,    0,    0,    0,    0,    0,    0,    0,  494,
494,  494,  494,  494,  494,  495,  495,  495,    0,    0,
0,    0,    0,  495,  495,    0,    0,    0,    0,    0,
0,    0,    0,  495,  495,  495,  495,  495,  495,  512,
512,  512,    0,    0,    0,    0,    0,  512,  512,    0,
0,    0,    0,    0,    0,    0,    0,  512,  512,  512,

512,  512,  512,  524,  524,  524,    0,    0,    0,    0,
0,  524,  524,    0,    0,    0,    0,    0,    0,    0,
0,  524,  524,  524,  524,  524,  524,  525,  525,  525,
0,    0,    0,    0,    0,  525,  525,    0,    0,    0,
0,    0,    0,    0,    0,  525,  525,  525,  525,  525,
525,  536,  536,  536,    0,    0,    0,    0,    0,  536,
536,    0,    0,    0,    0,    0,    0,    0,    0,  536,
536,  536,  536,  536,  536,  546,  546,  546,    0,    0,
0,    0,    0,  546,  546,    0,    0,    0,    0,    0,
0,    0,    0,  546,  546,  546,  546,  546,  546,  547,

547,  547,    0,    0,    0,    0,    0,  547,  547,    0,
0,    0,    0,    0,    0,    0,    0,  547,  547,  547,
547,  547,  547,  556,  556,  556,    0,    0,    0,    0,
0,  556,  556,    0,    0,    0,    0,    0,    0,    0,
0,  556,  556,  556,  556,  556,  556,  561,  561,  561,
0,    0,    0,    0,    0,  561,  561,    0,    0,    0,
0,    0,    0,    0,    0,  561,  561,  561,  561,  561,
561,  562,  562,  562,    0,    0,    0,    0,    0,  562,
562,    0,    0,    0,    0,    0,    0,    0,    0,  562,
562,  562,  562,  562,  562,  566,  566,  566,    0,    0,

0,    0,    0,  566,  566,    0,    0,    0,    0,    0,
0,    0,    0,  566,  566,  566,  566,  566,  566,  569,
569,  569,    0,    0,    0,    0,    0,  569,  569,    0,
0,    0,    0,    0,    0,    0,    0,  569,  569,  569,
569,  569,  569,  570,  570,  570,    0,    0,    0,    0,
0,  570,  570,    0,    0,    0,    0,    0,    0,    0,
0,  570,  570,  570,  570,  570,  570,  579,  579,  579,
579,  579,  579,  580,    0,  580,  580,  580,  580,  581,
0,    0,  581,  581,  581,  582,  582,  583,  583,  583,
583,  583,  583,  584,    0,  584,    0,  584,  584,  585,

585,  585,  585,  585,  585,  586,    0,  586,  586,  586,
586,  587,    0,  587,  587,  587,  587,  588,  588,  588,
588,  588,  588,  589,    0,  589,  589,  589,  589,  591,
0,  591,  591,  591,  591,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
578,  578,  578,  578,  578,  578,  578,  578

} ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
#define YY_NO_INPUT 1
#line 6 "scanner.l"
#include "yyparse.hpp"
#include "parser.hpp"
#include "debug.hpp"
#include "type.hpp"
#include "location.hpp"
#include "node.hpp"
#include <error.h>

using namespace type;
using namespace ast;
using namespace semantic;
using namespace util;

static int octalvalue (char c)
{
return c - '0';
}

static int hexvalue (char c)
{
if (c >= '0' && c <= '9')
  {
    return c - '0';
  }
if (c >= 'a' && c <= 'f')
  {
    return c - 'a' + 10;
  }
if (c >= 'A' && c <= 'F')
  {
    return c - 'A' + 10;
  }
NOT_REACHED;
}

static void validUnicode (unsigned int line, int u)
{
if (u > 0x10FFFF)
  {
    error_at_line (-1, 0, Location::static_file.c_str (), line,
                   "Unicode value is out of range (E135)");
  }

if (u >= 0xD800 && u <= 0xDFFF)
  {
    error_at_line (-1, 0, Location::static_file.c_str (), line,
                   "illegal surrogate pair (E136)");
  }
}

static int parseOctal (unsigned int line, const char* s)
{
int x =
  (octalvalue (s[0]) << 6) |
  (octalvalue (s[1]) << 3) |
  (octalvalue (s[2]) << 0);
if (x > 255)
  {
    error_at_line (-1, 0, Location::static_file.c_str (), line,
                   "octal escape is out of range (E134)");
  }
return x;
}

static int parseHex (unsigned int line, const char* s)
{
return
  (hexvalue (s[0]) << 4) |
  (hexvalue (s[1]) << 0);
}

static int parseU4 (unsigned int line, const char* s)
{
int x =
  (hexvalue (s[0]) << 12) |
  (hexvalue (s[1]) << 8) |
  (hexvalue (s[2]) << 4) |
  (hexvalue (s[3]) << 0);
validUnicode (line, x);
return x;
}

static int parseU8 (unsigned int line, const char* s)
{
int x =
  (hexvalue (s[0]) << 28) |
  (hexvalue (s[1]) << 24) |
  (hexvalue (s[2]) << 20) |
  (hexvalue (s[3]) << 16) |
  (hexvalue (s[4]) << 12) |
  (hexvalue (s[5]) << 8) |
  (hexvalue (s[6]) << 4) |
  (hexvalue (s[7]) << 0);
validUnicode (line, x);
return x;
}

static char* parseInterprettedString (unsigned int line, char* pos, char* limit, char* out);

static char* writeUtf8 (int x, char* out)
{
if (x < 128)
  {
    *out++ = x;
  }
else
  {
    char u[6];
    size_t idx = 0;
    while (x != 0)
      {
        u[idx++] = 0x80 | (x & 0x3F);
        x >>= 6;
      }
    switch (idx)
      {
      case 2:
        u[1] |= 0xC0;
        break;
      case 3:
        u[2] |= 0xE0;
        break;
      case 4:
        u[3] |= 0xF0;
        break;
      case 5:
        u[4] |= 0xF8;
        break;
      case 6:
        u[5] |= 0xFC;
        break;
      }
    while (idx != 0)
      {
        *out++ = u[idx-- - 1];
      }
  }
return out;
}


#line 1179 "scanner.cpp"

#define INITIAL 0
#define IN_COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
register yy_state_type yy_current_state;
register char *yy_cp, *yy_bp;
register int yy_act;

#line 144 "scanner.l"


#line 1368 "scanner.cpp"

if ( !(yy_init) )
  {
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if ( ! (yy_start) )
      (yy_start) = 1;	/* first start state */

    if ( ! yyin )
      yyin = stdin;

    if ( ! yyout )
      yyout = stdout;

    if ( ! YY_CURRENT_BUFFER )
      {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
        yy_create_buffer(yyin,YY_BUF_SIZE );
      }

    yy_load_buffer_state( );
  }

while ( 1 )		/* loops until end-of-file is reached */
  {
    yy_cp = (yy_c_buf_p);

    /* Support of yytext. */
    *yy_cp = (yy_hold_char);

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = (yy_start);
yy_match:
    do
      {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        if ( yy_accept[yy_current_state] )
          {
            (yy_last_accepting_state) = yy_current_state;
            (yy_last_accepting_cpos) = yy_cp;
          }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
          {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 579 )
              yy_c = yy_meta[(unsigned int) yy_c];
          }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        ++yy_cp;
      }
    while ( yy_base[yy_current_state] != 1736 );

yy_find_action:
    yy_act = yy_accept[yy_current_state];
    if ( yy_act == 0 )
      {
        /* have to back up */
        yy_cp = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        yy_act = yy_accept[yy_current_state];
      }

    YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

    switch ( yy_act )
      {
        /* beginning of action switch */
      case 0: /* must back up */
        /* undo the effects of YY_DO_BEFORE_ACTION */
        *yy_cp = (yy_hold_char);
        yy_cp = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        goto yy_find_action;

      case 1:
        YY_RULE_SETUP
#line 146 "scanner.l"
        /* Discard line comments. */
        YY_BREAK
      case 2:
        YY_RULE_SETUP
#line 147 "scanner.l"
        /* Discard line comments. */
        YY_BREAK

      case 3:
        YY_RULE_SETUP
#line 150 "scanner.l"
        BEGIN(IN_COMMENT);
        YY_BREAK


      case 4:
        YY_RULE_SETUP
#line 154 "scanner.l"
        BEGIN(INITIAL);
        YY_BREAK
      case 5:
        YY_RULE_SETUP
#line 155 "scanner.l"
// eat comment in chunks
        YY_BREAK
      case 6:
        YY_RULE_SETUP
#line 156 "scanner.l"
// eat the lone star
        YY_BREAK
      case 7:
        /* rule 7 can match eol */
        YY_RULE_SETUP
#line 157 "scanner.l"
        ++yylloc;
        YY_BREAK

      case 8:
        YY_RULE_SETUP
#line 160 "scanner.l"
        { return ACTION; }
        YY_BREAK
      case 9:
        YY_RULE_SETUP
#line 161 "scanner.l"
        { return ACTIVATE; }
        YY_BREAK
      case 10:
        YY_RULE_SETUP
#line 162 "scanner.l"
        { return BIND; }
        YY_BREAK
      case 11:
        YY_RULE_SETUP
#line 163 "scanner.l"
        { return BREAK; }
        YY_BREAK
      case 12:
        YY_RULE_SETUP
#line 164 "scanner.l"
        { return CASE; }
        YY_BREAK
      case 13:
        YY_RULE_SETUP
#line 165 "scanner.l"
        { return CHANGE; }
        YY_BREAK
      case 14:
        YY_RULE_SETUP
#line 166 "scanner.l"
        { return COMPONENT; }
        YY_BREAK
      case 15:
        YY_RULE_SETUP
#line 167 "scanner.l"
        { return CONST; }
        YY_BREAK
      case 16:
        YY_RULE_SETUP
#line 168 "scanner.l"
        { return CONTINUE; }
        YY_BREAK
      case 17:
        YY_RULE_SETUP
#line 169 "scanner.l"
        { return DEFAULT; }
        YY_BREAK
      case 18:
        YY_RULE_SETUP
#line 170 "scanner.l"
        { return ELSE; }
        YY_BREAK
      case 19:
        YY_RULE_SETUP
#line 171 "scanner.l"
        { return FALLTHROUGH; }
        YY_BREAK
      case 20:
        YY_RULE_SETUP
#line 172 "scanner.l"
        { return FOR; }
        YY_BREAK
      case 21:
        YY_RULE_SETUP
#line 173 "scanner.l"
        { return FOREIGN; }
        YY_BREAK
      case 22:
        YY_RULE_SETUP
#line 174 "scanner.l"
        { return FUNC; }
        YY_BREAK
      case 23:
        YY_RULE_SETUP
#line 175 "scanner.l"
        { return GETTER; }
        YY_BREAK
      case 24:
        YY_RULE_SETUP
#line 176 "scanner.l"
        { return GOTO; }
        YY_BREAK
      case 25:
        YY_RULE_SETUP
#line 177 "scanner.l"
        { return HEAP; }
        YY_BREAK
      case 26:
        YY_RULE_SETUP
#line 178 "scanner.l"
        { return IF; }
        YY_BREAK
      case 27:
        YY_RULE_SETUP
#line 179 "scanner.l"
        { return INIT; }
        YY_BREAK
      case 28:
        YY_RULE_SETUP
#line 180 "scanner.l"
        { return INSTANCE; }
        YY_BREAK
      case 29:
        YY_RULE_SETUP
#line 181 "scanner.l"
        { return INTERFACE; }
        YY_BREAK
      case 30:
        YY_RULE_SETUP
#line 182 "scanner.l"
        { return MAP; }
        YY_BREAK
      case 31:
        YY_RULE_SETUP
#line 183 "scanner.l"
        { return PULL; }
        YY_BREAK
      case 32:
        YY_RULE_SETUP
#line 184 "scanner.l"
        { return PUSH; }
        YY_BREAK
      case 33:
        YY_RULE_SETUP
#line 185 "scanner.l"
        { return RANGE; }
        YY_BREAK
      case 34:
        YY_RULE_SETUP
#line 186 "scanner.l"
        { return REACTION; }
        YY_BREAK
      case 35:
        YY_RULE_SETUP
#line 187 "scanner.l"
        { return RETURN; }
        YY_BREAK
      case 36:
        YY_RULE_SETUP
#line 188 "scanner.l"
        { return STRUCT; }
        YY_BREAK
      case 37:
        YY_RULE_SETUP
#line 189 "scanner.l"
        { return SWITCH; }
        YY_BREAK
      case 38:
        YY_RULE_SETUP
#line 190 "scanner.l"
        { return TYPE; }
        YY_BREAK
      case 39:
        YY_RULE_SETUP
#line 191 "scanner.l"
        { return VAR; }
        YY_BREAK
      case 40:
        YY_RULE_SETUP
#line 193 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 41:
        YY_RULE_SETUP
#line 194 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 42:
        YY_RULE_SETUP
#line 195 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 43:
        YY_RULE_SETUP
#line 196 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 44:
        YY_RULE_SETUP
#line 197 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 45:
        YY_RULE_SETUP
#line 198 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 46:
        YY_RULE_SETUP
#line 199 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 47:
        YY_RULE_SETUP
#line 200 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 48:
        YY_RULE_SETUP
#line 201 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 49:
        YY_RULE_SETUP
#line 202 "scanner.l"
        { return LEFT_SHIFT; }
        YY_BREAK
      case 50:
        YY_RULE_SETUP
#line 203 "scanner.l"
        { return RIGHT_SHIFT; }
        YY_BREAK
      case 51:
        YY_RULE_SETUP
#line 204 "scanner.l"
        { return AND_NOT; }
        YY_BREAK
      case 52:
        YY_RULE_SETUP
#line 205 "scanner.l"
        { return ADD_ASSIGN; }
        YY_BREAK
      case 53:
        YY_RULE_SETUP
#line 206 "scanner.l"
        { return SUBTRACT_ASSIGN; }
        YY_BREAK
      case 54:
        YY_RULE_SETUP
#line 207 "scanner.l"
        { return MULTIPLY_ASSIGN; }
        YY_BREAK
      case 55:
        YY_RULE_SETUP
#line 208 "scanner.l"
        { return DIVIDE_ASSIGN; }
        YY_BREAK
      case 56:
        YY_RULE_SETUP
#line 209 "scanner.l"
        { return MODULUS_ASSIGN; }
        YY_BREAK
      case 57:
        YY_RULE_SETUP
#line 210 "scanner.l"
        { return AND_ASSIGN; }
        YY_BREAK
      case 58:
        YY_RULE_SETUP
#line 211 "scanner.l"
        { return OR_ASSIGN; }
        YY_BREAK
      case 59:
        YY_RULE_SETUP
#line 212 "scanner.l"
        { return XOR_ASSIGN; }
        YY_BREAK
      case 60:
        YY_RULE_SETUP
#line 213 "scanner.l"
        { return LEFT_SHIFT_ASSIGN; }
        YY_BREAK
      case 61:
        YY_RULE_SETUP
#line 214 "scanner.l"
        { return RIGHT_SHIFT_ASSIGN; }
        YY_BREAK
      case 62:
        YY_RULE_SETUP
#line 215 "scanner.l"
        { return AND_NOT_ASSIGN; }
        YY_BREAK
      case 63:
        YY_RULE_SETUP
#line 216 "scanner.l"
        { return LOGIC_AND; }
        YY_BREAK
      case 64:
        YY_RULE_SETUP
#line 217 "scanner.l"
        { return LOGIC_OR; }
        YY_BREAK
      case 65:
        YY_RULE_SETUP
#line 218 "scanner.l"
        { return LEFT_ARROW; }
        YY_BREAK
      case 66:
        YY_RULE_SETUP
#line 219 "scanner.l"
        { return RIGHT_ARROW; }
        YY_BREAK
      case 67:
        YY_RULE_SETUP
#line 220 "scanner.l"
        { return INCREMENT; }
        YY_BREAK
      case 68:
        YY_RULE_SETUP
#line 221 "scanner.l"
        { return DECREMENT; }
        YY_BREAK
      case 69:
        YY_RULE_SETUP
#line 222 "scanner.l"
        { return EQUAL; }
        YY_BREAK
      case 70:
        YY_RULE_SETUP
#line 223 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 71:
        YY_RULE_SETUP
#line 224 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 72:
        YY_RULE_SETUP
#line 225 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 73:
        YY_RULE_SETUP
#line 226 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 74:
        YY_RULE_SETUP
#line 227 "scanner.l"
        { return NOT_EQUAL; }
        YY_BREAK
      case 75:
        YY_RULE_SETUP
#line 228 "scanner.l"
        { return LESS_EQUAL; }
        YY_BREAK
      case 76:
        YY_RULE_SETUP
#line 229 "scanner.l"
        { return MORE_EQUAL; }
        YY_BREAK
      case 77:
        YY_RULE_SETUP
#line 230 "scanner.l"
        { return SHORT_ASSIGN; }
        YY_BREAK
      case 78:
        YY_RULE_SETUP
#line 231 "scanner.l"
        { return DOTDOTDOT; }
        YY_BREAK
      case 79:
        YY_RULE_SETUP
#line 232 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 80:
        YY_RULE_SETUP
#line 233 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 81:
        YY_RULE_SETUP
#line 234 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 82:
        YY_RULE_SETUP
#line 235 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 83:
        YY_RULE_SETUP
#line 236 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 84:
        YY_RULE_SETUP
#line 237 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 85:
        YY_RULE_SETUP
#line 238 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 86:
        YY_RULE_SETUP
#line 239 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 87:
        YY_RULE_SETUP
#line 240 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 88:
        YY_RULE_SETUP
#line 241 "scanner.l"
        { return *yytext; }
        YY_BREAK
      case 89:
        YY_RULE_SETUP
#line 243 "scanner.l"
        {
          yylval.node = new Identifier (yylloc, yytext);
          return IDENTIFIER;
        }
        YY_BREAK
      case 90:
        /* rule 90 can match eol */
        YY_RULE_SETUP
#line 246 "scanner.l"
        {
          char* begin = yytext + 1;
          // Skip over the first and last `
          char* pos = begin;
          char* limit = yytext + yyleng - 1;
          // Set the destination.
          char* destination = pos;
          // Replace carriage returns.
          while (pos != limit)
            {
              char c = *pos;
              if (c != '\r')
                {
                  *destination++ = c;
                }
              ++pos;
            }

          size_t size = destination - begin;
          runtime::String v;
          void* o = malloc (size);
          memcpy (o, begin, size);
          v.ptr = o;
          v.length = size;

          Value value;
          value.untyped_string_value = v;
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedString::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 91:
        /* rule 91 can match eol */
        YY_RULE_SETUP
#line 276 "scanner.l"
        {
          char* begin = yytext + 1;
          char* pos = begin;
          char* limit = yytext + yyleng - 1;
          char* end = parseInterprettedString (yylloc, pos, limit, pos);
          size_t size = end - begin;
          runtime::String v;
          void* o = malloc (size);
          memcpy (o, begin, size);
          v.ptr = o;
          v.length = size;

          Value value;
          value.untyped_string_value = v;
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedString::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 92:
        YY_RULE_SETUP
#line 295 "scanner.l"
        {
          Value value;
          errno = 0;
          value.untyped_integer_value = strtoull (yytext, NULL, 10);
          if (errno == ERANGE)
            {
              error_at_line (-1, 0, Location::static_file.c_str (), yylloc,
              "integer literal '%s' is out of range (E11)", yytext);
            }
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedInteger::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 93:
        YY_RULE_SETUP
#line 308 "scanner.l"
        {
          Value value;
          errno = 0;
          value.untyped_integer_value = strtoull (yytext, NULL, 8);
          if (errno == ERANGE)
            {
              error_at_line (-1, 0, Location::static_file.c_str (), yylloc,
              "octal literal '%s' is out of range (E12)", yytext);
            }
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedInteger::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 94:
        YY_RULE_SETUP
#line 321 "scanner.l"
        {
          Value value;
          errno = 0;
          value.untyped_integer_value = strtoull (yytext, NULL, 16);
          if (errno == ERANGE)
            {
              error_at_line (-1, 0, Location::static_file.c_str (), yylloc,
              "hex literal '%s' is out of range (E13)", yytext);
            }
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedInteger::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 95:
        YY_RULE_SETUP
#line 334 "scanner.l"
        {
          Value value;
          value.untyped_float_value = strtod (yytext, NULL);
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedFloat::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 96:
        YY_RULE_SETUP
#line 342 "scanner.l"
        {
          Value value;
          value.untyped_complex_value = semantic::UntypedComplex::make (0, strtod (yytext, NULL));
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, type::UntypedComplex::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 97:
        YY_RULE_SETUP
#line 350 "scanner.l"
        {
          Value value;
          value.untyped_rune_value = yytext[1];
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 98:
        YY_RULE_SETUP
#line 358 "scanner.l"
        {
          Value value;
          value.present = true;
          switch (yytext[2])
            {
            case 'a':
              value.untyped_rune_value = '\a';
              yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
              break;
            case 'b':
              value.untyped_rune_value = '\b';
              yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
              break;
            case 'f':
              value.untyped_rune_value = '\f';
              yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
              break;
            case 'n':
              value.untyped_rune_value = '\n';
              yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
              break;
            case 'r':
              value.untyped_rune_value = '\r';
              yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
              break;
            case 't':
              value.untyped_rune_value = '\t';
              yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
              break;
            case 'v':
              value.untyped_rune_value = '\v';
              yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
              break;
            case '\\':
              value.untyped_rune_value = '\\';
              yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
              break;
            case '\'':
              value.untyped_rune_value = '\'';
              yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
              break;
            default:
              NOT_REACHED;
            }

          return LITERAL;
        }
        YY_BREAK
      case 99:
        YY_RULE_SETUP
#line 405 "scanner.l"
        {
          Value value;
          value.untyped_rune_value = parseOctal (yylloc, yytext + 2);
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 100:
        YY_RULE_SETUP
#line 413 "scanner.l"
        {
          Value value;
          value.untyped_rune_value = parseHex (yylloc, yytext + 3);
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 101:
        YY_RULE_SETUP
#line 421 "scanner.l"
        {
          Value value;
          value.untyped_rune_value = parseU4 (yylloc, yytext + 3);
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 102:
        YY_RULE_SETUP
#line 429 "scanner.l"
        {
          Value value;
          value.untyped_rune_value = parseU8 (yylloc, yytext + 3);
          value.present = true;
          yylval.node = new LiteralExpr (yylloc, UntypedRune::instance (), value);
          return LITERAL;
        }
        YY_BREAK
      case 103:
        YY_RULE_SETUP
#line 437 "scanner.l"
        /* Discard whitespace */
        YY_BREAK
      case 104:
        /* rule 104 can match eol */
        YY_RULE_SETUP
#line 438 "scanner.l"
        { ++yylloc; }
        YY_BREAK
      case 105:
        YY_RULE_SETUP
#line 439 "scanner.l"
        {
          error_at_line (-1, 0, Location::static_file.c_str (), yylloc,
          "unrecognized character '%s' (E66)", yytext);
        }
        YY_BREAK
      case 106:
        YY_RULE_SETUP
#line 444 "scanner.l"
        ECHO;
        YY_BREAK
#line 2158 "scanner.cpp"
      case YY_STATE_EOF(INITIAL):
      case YY_STATE_EOF(IN_COMMENT):
        yyterminate();

      case YY_END_OF_BUFFER:
      {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = (yy_hold_char);
        YY_RESTORE_YY_MORE_OFFSET

        if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
          {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between YY_CURRENT_BUFFER and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
            YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
          }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
          {
            /* This was really a NUL. */
            yy_state_type yy_next_state;

            (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state(  );

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = (yytext_ptr) + YY_MORE_ADJ;

            if ( yy_next_state )
              {
                /* Consume the NUL. */
                yy_cp = ++(yy_c_buf_p);
                yy_current_state = yy_next_state;
                goto yy_match;
              }

            else
              {
                yy_cp = (yy_c_buf_p);
                goto yy_find_action;
              }
          }

        else switch ( yy_get_next_buffer(  ) )
            {
            case EOB_ACT_END_OF_FILE:
            {
              (yy_did_buffer_switch_on_eof) = 0;

              if ( yywrap( ) )
                {
                  /* Note: because we've taken care in
                   * yy_get_next_buffer() to have set up
                   * yytext, we can now set up
                   * yy_c_buf_p so that if some total
                   * hoser (like flex itself) wants to
                   * call the scanner after we return the
                   * YY_NULL, it'll still work - another
                   * YY_NULL will get returned.
                   */
                  (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                  yy_act = YY_STATE_EOF(YY_START);
                  goto do_action;
                }

              else
                {
                  if ( ! (yy_did_buffer_switch_on_eof) )
                    YY_NEW_FILE;
                }
              break;
            }

            case EOB_ACT_CONTINUE_SCAN:
              (yy_c_buf_p) =
                (yytext_ptr) + yy_amount_of_matched_text;

              yy_current_state = yy_get_previous_state(  );

              yy_cp = (yy_c_buf_p);
              yy_bp = (yytext_ptr) + YY_MORE_ADJ;
              goto yy_match;

            case EOB_ACT_LAST_MATCH:
              (yy_c_buf_p) =
                &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

              yy_current_state = yy_get_previous_state(  );

              yy_cp = (yy_c_buf_p);
              yy_bp = (yytext_ptr) + YY_MORE_ADJ;
              goto yy_find_action;
            }
        break;
      }

      default:
        YY_FATAL_ERROR(
          "fatal flex scanner internal error--no action found" );
      } /* end of action switch */
  } /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
register char *source = (yytext_ptr);
register int number_to_move, i;
int ret_val;

if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
  YY_FATAL_ERROR(
    "fatal flex scanner internal error--end of buffer missed" );

if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
  {
    /* Don't try to fill the buffer, so this is an EOF. */
    if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
      {
        /* We matched a single character, the EOB, so
         * treat this as a final EOF.
         */
        return EOB_ACT_END_OF_FILE;
      }

    else
      {
        /* We matched some text prior to the EOB, first
         * process it.
         */
        return EOB_ACT_LAST_MATCH;
      }
  }

/* Try to read more data. */

/* First move last chars to start of buffer. */
number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

for ( i = 0; i < number_to_move; ++i )
  *(dest++) = *(source++);

if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
  /* don't do the read, it's not guaranteed to return an EOF,
   * just force an EOF
   */
  YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

else
  {
    int num_to_read =
      YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while ( num_to_read <= 0 )
      {
        /* Not enough room in the buffer - grow it. */

        /* just a shorter name for the current buffer */
        YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

        int yy_c_buf_p_offset =
          (int) ((yy_c_buf_p) - b->yy_ch_buf);

        if ( b->yy_is_our_buffer )
          {
            int new_size = b->yy_buf_size * 2;

            if ( new_size <= 0 )
              b->yy_buf_size += b->yy_buf_size / 8;
            else
              b->yy_buf_size *= 2;

            b->yy_ch_buf = (char *)
                           /* Include room in for 2 EOB chars. */
                           yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
          }
        else
          /* Can't grow it, we don't own it. */
          b->yy_ch_buf = 0;

        if ( ! b->yy_ch_buf )
          YY_FATAL_ERROR(
            "fatal error - scanner input buffer overflow" );

        (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

        num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                      number_to_move - 1;

      }

    if ( num_to_read > YY_READ_BUF_SIZE )
      num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
              (yy_n_chars), (size_t) num_to_read );

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

if ( (yy_n_chars) == 0 )
  {
    if ( number_to_move == YY_MORE_ADJ )
      {
        ret_val = EOB_ACT_END_OF_FILE;
        yyrestart(yyin  );
      }

    else
      {
        ret_val = EOB_ACT_LAST_MATCH;
        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
          YY_BUFFER_EOF_PENDING;
      }
  }

else
  ret_val = EOB_ACT_CONTINUE_SCAN;

if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
  {
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
    if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
      YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
  }

(yy_n_chars) += number_to_move;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
register yy_state_type yy_current_state;
register char *yy_cp;

yy_current_state = (yy_start);

for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
  {
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if ( yy_accept[yy_current_state] )
      {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos) = yy_cp;
      }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
      {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 579 )
          yy_c = yy_meta[(unsigned int) yy_c];
      }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  }

return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
register int yy_is_jam;
register char *yy_cp = (yy_c_buf_p);

register YY_CHAR yy_c = 1;
if ( yy_accept[yy_current_state] )
  {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos) = yy_cp;
  }
while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
  {
    yy_current_state = (int) yy_def[yy_current_state];
    if ( yy_current_state >= 579 )
      yy_c = yy_meta[(unsigned int) yy_c];
  }
yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
yy_is_jam = (yy_current_state == 578);

return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
    {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
        /* This was really a NUL. */
        *(yy_c_buf_p) = '\0';

      else
        {
          /* need more input */
          int offset = (yy_c_buf_p) - (yytext_ptr);
          ++(yy_c_buf_p);

          switch ( yy_get_next_buffer(  ) )
            {
            case EOB_ACT_LAST_MATCH:
              /* This happens because yy_g_n_b()
               * sees that we've accumulated a
               * token and flags that we need to
               * try matching the token before
               * proceeding.  But for input(),
               * there's no matching to consider.
               * So convert the EOB_ACT_LAST_MATCH
               * to EOB_ACT_END_OF_FILE.
               */

              /* Reset buffer status. */
              yyrestart(yyin );

              /*FALLTHROUGH*/

            case EOB_ACT_END_OF_FILE:
            {
              if ( yywrap( ) )
                return EOF;

              if ( ! (yy_did_buffer_switch_on_eof) )
                YY_NEW_FILE;
#ifdef __cplusplus
              return yyinput();
#else
              return input();
#endif
            }

            case EOB_ACT_CONTINUE_SCAN:
              (yy_c_buf_p) = (yytext_ptr) + offset;
              break;
            }
        }
    }

  c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0';	/* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart  (FILE * input_file )
{

  if ( ! YY_CURRENT_BUFFER )
    {
      yyensure_buffer_stack ();
      YY_CURRENT_BUFFER_LVALUE =
        yy_create_buffer(yyin,YY_BUF_SIZE );
    }

  yy_init_buffer(YY_CURRENT_BUFFER,input_file );
  yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

  /* TODO. We should be able to replace this entire function body
   * with
   *		yypop_buffer_state();
   *		yypush_buffer_state(new_buffer);
     */
  yyensure_buffer_stack ();
  if ( YY_CURRENT_BUFFER == new_buffer )
    return;

  if ( YY_CURRENT_BUFFER )
    {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state( );

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
  if ( ! b )
    YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
  if ( ! b->yy_ch_buf )
    YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b,file );

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer (YY_BUFFER_STATE  b )
{

  if ( ! b )
    return;

  if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

  if ( b->yy_is_our_buffer )
    yyfree((void *) b->yy_ch_buf  );

  yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
int oerrno = errno;

yy_flush_buffer(b );

b->yy_input_file = file;
b->yy_fill_buffer = 1;

/* If b is the current buffer, then yy_init_buffer was _probably_
 * called from yyrestart() or through yy_get_next_buffer.
 * In that case, we don't want to reset the lineno or column.
 */
if (b != YY_CURRENT_BUFFER)
  {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer (YY_BUFFER_STATE  b )
{
if ( ! b )
  return;

b->yy_n_chars = 0;

/* We always need two end-of-buffer characters.  The first causes
 * a transition to the end-of-buffer state.  The second causes
 * a jam in that state.
 */
b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

b->yy_buf_pos = &b->yy_ch_buf[0];

b->yy_at_bol = 1;
b->yy_buffer_status = YY_BUFFER_NEW;

if ( b == YY_CURRENT_BUFFER )
  yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
if (new_buffer == NULL)
  return;

yyensure_buffer_stack();

/* This block is copied from yy_switch_to_buffer. */
if ( YY_CURRENT_BUFFER )
  {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

/* Only push if top exists. Otherwise, replace top. */
if (YY_CURRENT_BUFFER)
  (yy_buffer_stack_top)++;
YY_CURRENT_BUFFER_LVALUE = new_buffer;

/* copied from yy_switch_to_buffer. */
yy_load_buffer_state( );
(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
if (!YY_CURRENT_BUFFER)
  return;

yy_delete_buffer(YY_CURRENT_BUFFER );
YY_CURRENT_BUFFER_LVALUE = NULL;
if ((yy_buffer_stack_top) > 0)
  --(yy_buffer_stack_top);

if (YY_CURRENT_BUFFER)
  {
    yy_load_buffer_state( );
    (yy_did_buffer_switch_on_eof) = 1;
  }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
int num_to_alloc;

if (!(yy_buffer_stack))
  {

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
         */
    num_to_alloc = 1;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                        (num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
      YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
  }

if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
  {

    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                        ((yy_buffer_stack),
                         num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
      YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
    (yy_buffer_stack_max) = num_to_alloc;
  }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
YY_BUFFER_STATE b;

if ( size < 2 ||
     base[size-2] != YY_END_OF_BUFFER_CHAR ||
     base[size-1] != YY_END_OF_BUFFER_CHAR )
  /* They forgot to leave room for the EOB's. */
  return 0;

b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
if ( ! b )
  YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
b->yy_buf_pos = b->yy_ch_buf = base;
b->yy_is_our_buffer = 0;
b->yy_input_file = 0;
b->yy_n_chars = b->yy_buf_size;
b->yy_is_interactive = 0;
b->yy_at_bol = 1;
b->yy_fill_buffer = 0;
b->yy_buffer_status = YY_BUFFER_NEW;

yy_switch_to_buffer(b  );

return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
YY_BUFFER_STATE b;
char *buf;
yy_size_t n;
int i;

/* Get memory for full buffer, including space for trailing EOB's. */
n = _yybytes_len + 2;
buf = (char *) yyalloc(n  );
if ( ! buf )
  YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

for ( i = 0; i < _yybytes_len; ++i )
  buf[i] = yybytes[i];

buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

b = yy_scan_buffer(buf,n );
if ( ! b )
  YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

/* It's okay to grow etc. this buffer, and we should throw it
 * away when we're done.
 */
b->yy_is_our_buffer = 1;

return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
(void) fprintf( stderr, "%s\n", msg );
exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
yyout = out_str ;
}

int yyget_debug  (void)
{
return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
/* Initialization is the same as for the non-reentrant scanner.
* This function is called from yylex_destroy(), so don't allocate here.
*/

(yy_buffer_stack) = 0;
(yy_buffer_stack_top) = 0;
(yy_buffer_stack_max) = 0;
(yy_c_buf_p) = (char *) 0;
(yy_init) = 0;
(yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
yyin = stdin;
yyout = stdout;
#else
yyin = (FILE *) 0;
yyout = (FILE *) 0;
#endif

/* For future reference: Set errno on error, since we are called by
 * yylex_init()
 */
return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

/* Pop the buffer stack, destroying each element. */
while(YY_CURRENT_BUFFER)
  {
    yy_delete_buffer(YY_CURRENT_BUFFER  );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state();
  }

/* Destroy the stack itself. */
yyfree((yy_buffer_stack) );
(yy_buffer_stack) = NULL;

/* Reset the globals. This is important in a non-reentrant scanner so the next time
 * yylex() is called, initialization will occur. */
yy_init_globals( );

return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
register int i;
for ( i = 0; i < n; ++i )
  s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
register int n;
for ( n = 0; s[n]; ++n )
  ;

return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
/* The cast to (char *) in the following accommodates both
 * implementations that use char* generic pointers, and those
 * that use void* generic pointers.  It works with the latter
 * because both ANSI C and C++ allow castless assignment from
 * any pointer type to void*, and deal with argument conversions
 * as though doing an assignment.
 */
return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 444 "scanner.l"



static char* parseInterprettedString (unsigned int line, char* pos, char* limit, char* out)
{
while (pos != limit)
  {
    char c = *pos;
    if (c != '\\')
      {
        *out++ = *pos++;
      }
    else
      {
        ++pos;
        switch (*pos)
          {
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          {
            int x = parseOctal (line, pos);
            pos += 3;
            *out++ = x;
          }
          break;
          case 'x':
          {
            ++pos;
            int x = parseHex (line, pos);
            pos += 2;
            *out++ = x;
          }
          break;
          case 'u':
          {
            ++pos;
            int x = parseU4 (line, pos);
            pos += 4;
            out = writeUtf8 (x, out);
          }
          break;
          case 'U':
          {
            ++pos;
            int x = parseU8 (line, pos);
            pos += 8;
            out = writeUtf8 (x, out);
          }
          break;
          case 'a':
            *out++ = '\a';
            ++pos;
            break;
          case 'b':
            *out++ = '\b';
            ++pos;
            break;
          case 'f':
            *out++ = '\f';
            ++pos;
            break;
          case 'n':
            *out++ = '\n';
            ++pos;
            break;
          case 'r':
            *out++ = '\r';
            ++pos;
            break;
          case 't':
            *out++ = '\t';
            ++pos;
            break;
          case 'v':
            *out++ = '\v';
            ++pos;
            break;
          case '\\':
            *out++ = '\\';
            ++pos;
            break;
          case '"':
            *out++ = '"';
            ++pos;
            break;
          }
      }
  }

return out;
}

