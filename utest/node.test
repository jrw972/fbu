/* -*- c++ -*- */
#include "unit_test.hpp"
#include "node.hpp"
#include "polymorphic_function.hpp"
#include "node_visitor.hpp"
#include "visitor_helper.hpp"
#include <sstream>
#include "type.hpp"
#include "node_cast.hpp"
#include "identifier.hpp"

using namespace ast;
using namespace source;

struct MyPolymorphicFunction : public decl::PolymorphicFunction {
  MyPolymorphicFunction () : PolymorphicFunction (Identifier ("id", Location::builtin))
  { }

  virtual void accept (decl::PolymorphicFunctionVisitor& visitor) const { }

  virtual void
  check (util::ErrorReporter& er,
         const Location& loc,
         semantic::ExpressionValue& result,
         semantic::ExpressionValueList& arguments) const { }

  virtual void
  compute_receiver_access (const semantic::ExpressionValueList& args,
                           ReceiverAccess& receiver_access,
                           bool& flag) const { }

  virtual runtime::Operation*
  generate_code (const semantic::ExpressionValue& result,
                 const semantic::ExpressionValueList& arg_vals,
                 runtime::ListOperation* arg_ops) const { return NULL; }
};

struct DefaultNodeVisitorHarness : public DefaultNodeVisitor {
  Node* node;

  DefaultNodeVisitorHarness ()
    : node (NULL)
  { }

  void default_action (Node& node)
  {
    this->node = &node;
  }
};

void test_default_visit (Node& node)
{
  DefaultNodeVisitorHarness v;
  node.accept (v);
  ASSERT (v.node == &node);
}

struct VisitChildren : public DefaultNodeVisitor {
  std::set<Node*> nodes;
  virtual void default_action (Node& node) { nodes.insert (&node); }
};

void test_visit_children (Node& node, Node* c1 = NULL, Node* c2 = NULL, Node* c3 = NULL, Node* c4 = NULL, Node* c5 = NULL, Node* c6 = NULL) {
  std::set<Node*> expected;
  if (c1) expected.insert (c1);
  if (c2) expected.insert (c2);
  if (c3) expected.insert (c3);
  if (c4) expected.insert (c4);
  if (c5) expected.insert (c5);
  if (c6) expected.insert (c6);
  VisitChildren v;
  node.visit_children (v);

  ASSERT (v.nodes == expected);
}

void test_print (Node& node)
{
  std::stringstream ss;
  node.print (ss);
  ASSERT (!ss.str ().empty ());
}

scope(ast); {

  MyPolymorphicFunction poly_func;

  Location loc = Location::builtin;
  source::Identifier identifier1 ("identifier1", loc);
  source::Identifier identifier2 ("identifier2", loc);

  IdentifierList idlist (loc);

  ExpressionList list1 (loc);
  ExpressionList list2 (loc);

  EmptyType node1 (loc);
  EmptyType node2 (loc);
  EmptyType node3 (loc);
  EmptyType node4 (loc);

  Receiver receiver1 (loc, identifier1, Mutable, Mutable, false, identifier2);

  ast::ParameterList parameters1 (loc);
  ast::ParameterList parameters2 (loc);

  scope(Activate); {
    scenario(default); {
      Activate node (loc, &list1, &node1);
      unit(Activate); {
        ASSERT (node.arguments == &list1);
        ASSERT (node.body == &node1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &list1, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(AddAssign); {
    scenario(default); {
      AddAssign node (loc, &node1, &node2);
      unit(AddAssign); {
        ASSERT (node.left == &node1);
        ASSERT (node.right == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(AddressOf); {
    scenario(default); {
      AddressOf node (loc, &node1);
      unit(AddressOf); {
        ASSERT (node.child == &node1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Array); {
    scenario(default); {
      Array node (loc, &node1, &node2);
      unit(Array); {
        ASSERT (node.dimension == &node1);
        ASSERT (node.base_type == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Assign); {
    scenario(default); {
      Assign node (loc, &node1, &node2);
      unit(Assign); {
        ASSERT (node.left == &node1);
        ASSERT (node.right == &node2);
      } off ();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(BinderDecl); {
    scenario(default); {
      BinderDecl node (loc, &receiver1, identifier1, &node2);
      unit(Bind); {
        ASSERT (node.receiver == &receiver1);
        ASSERT (node.identifier == identifier1);
        ASSERT (node.body == &node2);
      } off ();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &receiver1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(BindPullPort); {
    scenario(default); {
      BindPullPort node (loc, &node1, &node2);
      unit(BindPullPort); {
        ASSERT (node.left == &node1);
        ASSERT (node.right == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(BindPushPortParameter); {
    scenario(default); {
      BindPushPortParameter node (loc, &node1, &node2, &node3);
      unit(BindPushPortParameter); {
        ASSERT (node.left == &node1);
        ASSERT (node.right == &node2);
        ASSERT (node.param == &node3);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2, &node3);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(BindPushPort); {
    scenario(default); {
      BindPushPort node (loc, &node1, &node2);
      unit(BindPushPort); {
        ASSERT (node.left == &node1);
        ASSERT (node.right == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Call); {
    scenario(default); {
      Call node (loc, &node1, &list1);
      unit(Call); {
        ASSERT (node.expression == &node1);
        ASSERT (node.arguments == &list1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &list1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Change); {
    scenario(default); {
      Change node (loc, &node1, identifier1, &node2);
      unit(Change); {
        ASSERT (node.argument == &node1);
        ASSERT (node.identifier == identifier1);
        ASSERT (node.body == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope (CompositeLiteral); {
    scenario(default); {
      CompositeLiteral node (loc, &node1, &list1);
      unit(CompositeLiteral); {
        ASSERT (node.type == &node1);
        ASSERT (node.value == &list1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &list1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope (Const); {
    scenario(default); {
      ConstDecl node (loc, &idlist, &node1, &list2);
      unit(Const); {
        ASSERT (node.identifiers == &idlist);
        ASSERT (node.type == &node1);
        ASSERT (node.expressions == &list2);
        ASSERT (node.symbols.empty ());
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &idlist, &node1, &list2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Conversion); {
    scenario(default); {
      Conversion node (loc, &node1, &node2);
      unit(Conversion); {
        ASSERT (node.type == &node1);
        ASSERT (node.argument == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Dereference); {
    scenario(default); {
      Dereference node (loc, &node1);
      unit(Dereference); {
        ASSERT (node.child == &node1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(ActionDecl); {
    scenario(default); {
      ActionDecl node (loc, &node1, &receiver1, identifier1, &node3, &node4);
      unit(ActionDecl); {
        ASSERT (node.dimension == &node1);
        ASSERT (node.receiver == &receiver1);
        ASSERT (node.identifier == identifier1);
        ASSERT (node.precondition == &node3);
        ASSERT (node.body == &node4);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &receiver1, &node3, &node4);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();


  scope(ReactionDecl); {
    scenario(default); {
      ReactionDecl node (loc, &node1, &receiver1, identifier1, &parameters1, &node3);
      unit(ReactionDecl); {
        ASSERT (node.dimension == &node1);
        ASSERT (node.receiver == &receiver1);
        ASSERT (node.identifier == identifier1);
        ASSERT (node.parameters == &parameters1);
        ASSERT (node.body == &node3);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &receiver1, &parameters1, &node3, node.return_parameters);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Element); {
    scenario(default); {
      Element node (loc, &node1, &node2);
      unit(Element); {
        ASSERT (node.key == &node1);
        ASSERT (node.value == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(ElementList); {
    scenario(default); {
      ElementList node (loc);
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(EmptyExpression); {
    scenario(default); {
      EmptyExpression node (loc);
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(EmptyStatement); {
    scenario(default); {
      EmptyStatement node (loc);
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(EmptyType); {
    scenario(default); {
      EmptyType node (loc);
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(ExpressionStatement); {
    scenario(default); {
      ExpressionStatement node (loc, &node1);
      unit(ExpressionStatement); {
        ASSERT (node.child == &node1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(FieldList); {
    scenario(default); {
      FieldList node (loc);
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(ForIota); {
    scenario(default); {
      ForIota node (loc, identifier1, &node1, &node2);
      unit(ForIota); {
        ASSERT (node.identifier == identifier1);
        ASSERT (node.limit == &node1);
        ASSERT (node.body == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(FunctionDecl); {
    scenario(default); {
      FunctionDecl node (loc, identifier1, &parameters1, &parameters2, &node1);
      unit(Function); {
        ASSERT (node.identifier == identifier1);
        ASSERT (node.parameters == &parameters1);
        ASSERT (node.return_parameters == &parameters2);
        ASSERT (node.body == &node1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &parameters1, &parameters2, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(GetterDecl); {
    scenario(default); {
      GetterDecl node (loc, &receiver1, identifier1, &parameters1, &parameters2, &node2);
      unit(GetterDecl); {
        ASSERT (node.receiver == &receiver1);
        ASSERT (node.identifier == identifier1);
        ASSERT (node.parameters == &parameters1);
        ASSERT (node.return_parameters == &parameters2);
        ASSERT (node.body == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &receiver1, &parameters1, &parameters2, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Heap); {
    scenario(default); {
      Heap node (loc, &node1);
      unit(Heap); {
        ASSERT (node.child == &node1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(IdentifierExpression); {
    scenario(default); {
      IdentifierExpression node (loc, identifier1);
      unit(IdentifierExpression); {
        ASSERT (node.identifier == identifier1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(IdentifierList); {
    scenario(default); {
      IdentifierList node (loc);
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(VariableList); {
    scenario(default); {
    VariableList node (loc, &idlist, Mutable, Immutable, &node1);
    unit(VariableList); {
      ASSERT (node.identifiers == &idlist);
      ASSERT (node.mutability == Mutable);
      ASSERT (node.indirection_mutability == Immutable);
      ASSERT (node.type == &node1);
    } off();
    unit(accept); {
      test_accept<DefaultNodeVisitor> (node);
      test_default_visit (node);
    }; off();
    unit(visit_children); {
      test_visit_children (node, &idlist, &node1);
    }; off();
    unit(print); {
      test_print (node);
    }; off();
    }; off();
  }; off();

  scope(IdentifierType); {
    scenario(default); {
      IdentifierType node (loc, identifier1);
      unit(IdentifierType); {
        ASSERT (node.identifier == identifier1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(If); {
    scenario(default); {
      If node (loc, &node1, &node2, &node3, &node4);
      unit(If); {
        ASSERT (node.before == &node1);
        ASSERT (node.condition == &node2);
        ASSERT (node.true_body == &node3);
        ASSERT (node.false_body == &node4);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2, &node3, &node4);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(IncrementDecrement); {
    scenario(default); {
      IncrementDecrement node (loc, &node1, IncrementDecrement::Decrement);
      unit(IncrementDecrement); {
        ASSERT (node.child == &node1);
        ASSERT (node.kind == IncrementDecrement::Decrement);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Index); {
    scenario(default); {
      Index node (loc, &node1, &node2);
      unit(Index); {
        ASSERT (node.base == &node1);
        ASSERT (node.index == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(IndexedPushPortCall); {
    scenario(default); {
      IndexedPushPortCall node (loc, identifier1, &node1, &list1);
      unit(IndexedPushPortCall); {
        ASSERT (node.identifier == identifier1);
        ASSERT (node.index == &node1);
        ASSERT (node.arguments == &list1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &list1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(InitializerDecl); {
    scenario(default); {
      InitializerDecl node (loc, &receiver1, identifier1, &parameters1, &parameters2, &node2);
      unit(InitializerDecl); {
        ASSERT (node.receiver == &receiver1);
        ASSERT (node.identifier == identifier1);
        ASSERT (node.parameters == &parameters1);
        ASSERT (node.return_parameters == &parameters2);
        ASSERT (node.body == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &receiver1, &parameters1, &parameters2, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(InstanceDecl); {
    scenario(default); {
      InstanceDecl node (loc, identifier1, &node1, identifier2, &list1);
      unit(Instance); {
        ASSERT (node.identifier == identifier1);
        ASSERT (node.type == &node1);
        ASSERT (node.initializer == identifier2);
        ASSERT (node.arguments == &list1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &list1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(ExpressionList); {

    scenario(empty); {
      ExpressionList node (loc);
      unit(ExpressionList); {
        ASSERT (node.empty());
        ASSERT (node.size () == 0);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();

    scenario(not_empty); {
      ExpressionList node (loc);
      node.append (&node1);
      node.append (&node2);
      unit(append); {
        ASSERT (!node.empty());
        ASSERT (node.size () == 2);
        ASSERT (node.at (0) == &node1);
        ASSERT (node.at (1) == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(StatementList); {
    scenario(default); {
      StatementList node (loc);
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Literal); {
    scenario(default); {
      semantic::ExpressionValue v;
      v.kind = semantic::ExpressionValue::Constant;
      v.type = &type::named_int;
      Literal node (loc, v);
      unit(Literal); {
        ASSERT (node.eval.type == &type::named_int);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Map); {
    scenario(default); {
      Map node (loc, &node1, &node2);
      unit(Map); {
        ASSERT (node.key == &node1);
        ASSERT (node.value == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(MethodDecl); {
    scenario(default); {
      MethodDecl node (loc, &receiver1, identifier1, &parameters1, &parameters2, &node2);
      unit(MethodDecl); {
        ASSERT (node.receiver == &receiver1);
        ASSERT (node.identifier == identifier1);
        ASSERT (node.parameters == &parameters1);
        ASSERT (node.return_parameters == &parameters2);
        ASSERT (node.body == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &receiver1, &parameters1, &parameters2, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(ParameterList); {
    scenario(default); {
      ParameterList node (loc);
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Pointer); {
    scenario(default); {
      Pointer node (loc, &node1);
      unit(Pointer); {
        ASSERT (node.child == &node1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(PullPort); {
    scenario(default); {
      PullPort node (loc, &parameters1, &parameters2);
      unit(PullPort); {
        ASSERT (node.parameters == &parameters1);
        ASSERT (node.return_parameters == &parameters2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &parameters1, &parameters2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(PushPortCall); {
    scenario(default); {
      PushPortCall node (loc, identifier1, &list1);
      unit(PushPortCall); {
        ASSERT (node.identifier == identifier1);
        ASSERT (node.arguments == &list1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &list1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(PushPort); {
    scenario(default); {
      PushPort node (loc, &parameters1);
      unit(PushPort); {
        ASSERT (node.parameters == &parameters1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &parameters1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Receiver); {
    scenario(default); {
      Receiver node (loc, identifier1, Mutable, Immutable, true, identifier2);
      unit(Receiver); {
        ASSERT (node.identifier == identifier1);
        ASSERT (node.mutability == Mutable);
        ASSERT (node.indirection_mutability == Immutable);
        ASSERT (node.is_pointer);
        ASSERT (node.type_identifier == identifier2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Return) {
    scenario(default); {
      Return node (loc, &node1);
      unit(Return); {
        ASSERT (node.child == &node1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Select); {
    scenario(default); {
      Select node (loc, &node1, identifier1);
      unit(Select); {
        ASSERT (node.base == &node1);
        ASSERT (node.identifier == identifier1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(IndexSlice); {
    scenario(default); {
      IndexSlice node (loc, &node1, &node2, &node3, &node4);
      unit(IndexSlice); {
        ASSERT (node.base == &node1);
        ASSERT (node.low == &node2);
        ASSERT (node.high == &node3);
        ASSERT (node.max == &node4);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2, &node3, &node4);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Slice); {
    scenario(default); {
      Slice node (loc, &node1);
      unit(Slice); {
        ASSERT (node.child == &node1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(SubtractAssign); {
    scenario(default); {
      SubtractAssign node (loc, &node1, &node2);
      unit(SubtractAssign); {
        ASSERT (node.left == &node1);
        ASSERT (node.right == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(TypeDecl); {
    scenario(default); {
      TypeDecl node (loc, identifier1, &node1);
      unit(TypeDecl); {
        ASSERT (node.identifier == identifier1);
        ASSERT (node.type == &node1);
        ASSERT (node.symbol == NULL);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(TypeExpression); {
    scenario(default); {
      TypeExpression node (loc, &node1);
      unit(TypeExpression); {
        ASSERT (node.child == &node1);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(Var); {
    scenario(default); {
      VarDecl node (loc, &idlist, Mutable, Immutable, &node1, &list2);
      unit(Var); {
        ASSERT (node.identifiers == &idlist);
        ASSERT (node.mutability == Mutable);
        ASSERT (node.indirection_mutability == Immutable);
        ASSERT (node.type == &node1);
        ASSERT (node.expressions == &list2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &idlist, &node1, &list2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  scope(While); {
    scenario(default); {
      While node (loc, &node1, &node2);
      unit(While); {
        ASSERT (node.condition == &node1);
        ASSERT (node.body == &node2);
      }; off();
      unit(accept); {
        test_accept<DefaultNodeVisitor> (node);
        test_default_visit (node);
      }; off();
      unit(visit_children); {
        test_visit_children (node, &node1, &node2);
      }; off();
      unit(print); {
        test_print (node);
      }; off();
    }; off();
  }; off();

  unit(left_shift_Node); {
    std::stringstream ss1;
    node1.print (ss1);
    std::stringstream ss2;
    ss2 << node1;
    ASSERT (ss1.str () == ss2.str ());
  }; off();

  unit(make_unary); {
    Call* n = make_unary (loc, &poly_func, &node1);
    Literal* l = node_cast<Literal> (n->expression);
    ASSERT (l->eval.is_polymorphic_function ());
    ASSERT (l->eval.polymorphic_function == &poly_func);
    ASSERT (n->arguments->size () == 1);
    ASSERT (n->arguments->at (0) == &node1);
  }; off();

  unit(make_binary); {
    Call* n = make_binary (loc, &poly_func, &node1, &node2);
    Literal* l = node_cast<Literal> (n->expression);
    ASSERT (l->eval.is_polymorphic_function ());
    ASSERT (l->eval.polymorphic_function == &poly_func);
    ASSERT (n->arguments->size () == 2);
    ASSERT (n->arguments->at (0) == &node1);
    ASSERT (n->arguments->at (1) == &node2);
  }; off();

}; off();
