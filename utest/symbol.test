/* -*- c++ -*- */
#include "unit_test.hpp"
#include "tap.hpp"
#include "symbol.hpp"
#include "type.hpp"
#include "callable.hpp"
#include "visitor_helper.hpp"
#include "symbol_visitor.hpp"
#include "node.hpp"
#include "error_reporter.hpp"
#include "scope.hpp"
#include "package.hpp"
#include "enter_predeclared_identifiers.hpp"
#include "astgen.hpp"

using namespace type;
using namespace decl;
using namespace util;
using namespace ast;

scope(decl); {
  Location loc;
  ErrorReporter er;
  Scope scope;

  scope(Instance); {

    scenario(fully_constructed); {
      type::NamedType x ("mytype", loc, &type::named_int);
      decl::Initializer init (gen_init_decl ("blah"), &x);
      Instance symbol ("name", loc, &named_int, &init);

      unit(Instance); {
        ASSERT (symbol.name == "name");
        ASSERT (symbol.location == loc);
        ASSERT (symbol.type () == &named_int);
        ASSERT (symbol.initializer () == &init);
        ASSERT (symbol.instance == NULL);
      }; off();

      unit(offset); {
        symbol.offset (53);
        ASSERT (symbol.offset () == 53);
      }; off();

      scenario(SymbolVisitor); {
        unit(accept); {
          TestVisitor<SymbolVisitor, Instance> v;
          symbol.accept (v);
          ASSERT (v.item == &symbol);
          TestDefaultVisitor<SymbolVisitor, Symbol> w;
          symbol.accept (w);
          ASSERT (w.item == &symbol);
        }; off();
      }; off();

      scenario(ConstSymbolVisitor); {
        unit(accept); {
          TestConstVisitor<ConstSymbolVisitor, Instance> cv;
          symbol.accept (cv);
          ASSERT (cv.item == &symbol);
          TestDefaultConstVisitor<ConstSymbolVisitor, Symbol> w;
          symbol.accept (w);
          ASSERT (w.item == &symbol);
        }; off();
      }; off();
    }; off();

    scenario(from_decl); {
      scenario (no_type); {
        unit(process_declaration); {
          ast::Identifier identifier (1, "i");
          ast::Identifier id2 (1, "T");
          ast::IdentifierType type (1, &id2);
          ast::Identifier init (1, "init");
          ast::IdentifierList arguments (1);
          ast::InstanceDecl instancedecl (1, &identifier, &type, &init, &arguments);
          decl::Instance instance (&instancedecl);
          ASSERT (instance.process_declaration (er, &scope) == false);
          ASSERT (er.count () == 1);
        }; off();
      }; off();

      scenario (not_a_component); {
        unit(process_declaration); {
          semantic::enter_predeclared_identifiers (&scope);
          ast::Identifier identifier (1, "i");
          ast::Identifier id2 (1, "int");
          ast::IdentifierType type (1, &id2);
          ast::Identifier init (1, "init");
          ast::IdentifierList arguments (1);
          ast::InstanceDecl instancedecl (1, &identifier, &type, &init, &arguments);
          decl::Instance instance (&instancedecl);
          ASSERT (instance.process_declaration (er, &scope) == false);
          ASSERT (er.count () == 1);
        }; off();
      }; off();

      scenario (no_initializer); {
        unit(process_declaration); {
          type::Component mycomp (NULL, loc);
          type::NamedType mytype ("mytype", loc, &mycomp);
          scope.enter_symbol (&mytype);

          ast::Identifier identifier (1, "i");
          ast::Identifier id2 (1, "mytype");
          ast::IdentifierType type (1, &id2);
          ast::Identifier init (1, "init");
          ast::IdentifierList arguments (1);
          ast::InstanceDecl instancedecl (1, &identifier, &type, &init, &arguments);
          decl::Instance instance (&instancedecl);
          ASSERT (instance.process_declaration (er, &scope) == false);
          ASSERT (er.count () == 1);
        }; off();
      }; off();

      scenario (success); {
        unit(process_declaration); {
          type::Component mycomp (NULL, loc);
          type::NamedType mytype ("mytype", loc, &mycomp);
          decl::Initializer initializer (gen_init_decl ("init"), &mytype);
          mytype.insert_initializer (&initializer);

          scope.enter_symbol (&mytype);

          ast::Identifier identifier (1, "i");
          ast::Identifier id2 (1, "mytype");
          ast::IdentifierType type (1, &id2);
          ast::Identifier init (1, "init");
          ast::IdentifierList arguments (1);
          ast::InstanceDecl instancedecl (1, &identifier, &type, &init, &arguments);
          decl::Instance instance (&instancedecl);
          ASSERT (instance.process_declaration (er, &scope) == true);
          ASSERT (er.count () == 0);
          ASSERT (instance.type () == &mytype);
          ASSERT (instance.initializer () == &initializer);
        }; off();
      }; off();

    }; off();
  }; off();

  scope(Parameter); {

    scenario(make); {

      Parameter* symbol = Parameter::make (loc, "name", &named_int, Immutable, Immutable);

      unit(make); {
        ASSERT (symbol->name == "name");
        ASSERT (symbol->location == loc);
        ASSERT (symbol->type == &named_int);
        ASSERT (symbol->intrinsic_mutability == Immutable);
        ASSERT (symbol->indirection_mutability == Immutable);
        ASSERT (symbol->kind == Parameter::Ordinary);
      }; off();

      unit(offset); {
        static_cast<Symbol*> (symbol)->offset (53);
        ASSERT (symbol->offset () == 53);
      }; off();

      scenario(SymbolVisitor); {
        unit(accept); {
          TestVisitor<SymbolVisitor, Parameter> v;
          symbol->accept (v);
          ASSERT (v.item == symbol);
          TestDefaultVisitor<SymbolVisitor, Symbol> w;
          symbol->accept (w);
          ASSERT (w.item == symbol);
        }; off();
      }; off();

      scenario(ConstSymbolVisitor); {
        unit(accept); {
          TestConstVisitor<ConstSymbolVisitor, Parameter> cv;
          symbol->accept (cv);
          ASSERT (cv.item == symbol);
          TestDefaultConstVisitor<ConstSymbolVisitor, Symbol> w;
          symbol->accept (w);
          ASSERT (w.item == symbol);
        }; off();
      }; off();

      unit(duplicate); {
        Parameter* dup1 = symbol->duplicate (Mutable);
        Parameter* dup2 = dup1->duplicate (Foreign);
        static_cast<Symbol*> (symbol)->offset (34);
        ASSERT (dup1->name == "name");
        ASSERT (dup1->location == loc);
        ASSERT (dup1->type == &named_int);
        ASSERT (dup1->intrinsic_mutability == Immutable);
        ASSERT (dup1->indirection_mutability == Mutable);
        ASSERT (dup1->kind == Parameter::Ordinary_Duplicate);
        ASSERT (dup1->offset () == 34);
        ASSERT (dup2->indirection_mutability == Foreign);
        ASSERT (dup2->offset () == 34);
      }; off();

    }; off();

    unit(make_return); {
      Parameter* symbol = Parameter::make_return (loc, "name", &named_int, Immutable);
      ASSERT (symbol->name == "name");
      ASSERT (symbol->location == loc);
      ASSERT (symbol->type == &named_int);
      ASSERT (symbol->intrinsic_mutability == Mutable);
      ASSERT (symbol->indirection_mutability == Immutable);
      ASSERT (symbol->kind == Parameter::Return);
    }; off();

    scenario(make_receiver); {

      Parameter* symbol = Parameter::make_receiver (loc, "name", &named_int, Immutable, Immutable);

      unit(make_receiver); {
        ASSERT (symbol->name == "name");
        ASSERT (symbol->location == loc);
        ASSERT (symbol->type == &named_int);
        ASSERT (symbol->intrinsic_mutability == Immutable);
        ASSERT (symbol->indirection_mutability == Immutable);
        ASSERT (symbol->kind == Parameter::Receiver);
      }; off();

      unit(duplicate); {
        Parameter* dup1 = symbol->duplicate (Mutable);
        Parameter* dup2 = dup1->duplicate (Foreign);
        static_cast<Symbol*> (symbol)->offset (34);
        ASSERT (dup1->name == "name");
        ASSERT (dup1->location == loc);
        ASSERT (dup1->type == &named_int);
        ASSERT (dup1->intrinsic_mutability == Immutable);
        ASSERT (dup1->indirection_mutability == Mutable);
        ASSERT (dup1->kind == Parameter::Receiver_Duplicate);
        ASSERT (dup1->offset () == 34);
        ASSERT (dup2->indirection_mutability == Foreign);
        ASSERT (dup2->offset () == 34);
      }; off();
    }; off();

    unit(is_foreign_safe); {
      Parameter* safe1_symbol = Parameter::make (loc, "name", &named_int, Immutable, Immutable);
      Parameter* safe2_symbol = Parameter::make (loc, "name", named_int.get_pointer (), Immutable, Foreign);
      Parameter* unsafe_symbol = Parameter::make (loc, "name", named_int.get_pointer (), Immutable, Immutable);

      ASSERT (safe1_symbol->is_foreign_safe ());
      ASSERT (safe2_symbol->is_foreign_safe ());
      ASSERT (!unsafe_symbol->is_foreign_safe ());
    }; off();
  }; off();

  scope(Constant); {

    scenario(fully_constructed); {
      semantic::Value value;
      value.present = true;
      value.int_value = 37;
      Constant symbol ("name", loc, &named_int, value);

      unit(Constant); {
        ASSERT (symbol.name == "name");
        ASSERT (symbol.location == loc);
        ASSERT (symbol.type () == &named_int);
        ASSERT (symbol.value ().int_value == 37);
      }; off();

      scenario(SymbolVisitor); {
        unit(accept); {
          TestVisitor<SymbolVisitor, Constant> v;
          symbol.accept (v);
          ASSERT (v.item == &symbol);
          TestDefaultVisitor<SymbolVisitor, Symbol> w;
          symbol.accept (w);
          ASSERT (w.item == &symbol);
        }; off();
      }; off();

      scenario(ConstSymbolVisitor); {
        unit(accept); {
          TestConstVisitor<ConstSymbolVisitor, Constant> cv;
          symbol.accept (cv);
          ASSERT (cv.item == &symbol);
          TestDefaultConstVisitor<ConstSymbolVisitor, Symbol> w;
          symbol.accept (w);
          ASSERT (w.item == &symbol);
        }; off();
      }; off();
    }; off();

    scenario(from_decl); {

      scenario(with_type); {

        scenario(bad_type); {
          unit(process_declaration); {
            Identifier id1 (1, "not_declared");
            IdentifierType type (1, &id1);
            semantic::Value val;
            val.present = true;
            Literal expr (1, type::UntypedInteger::instance (), val);
            Constant myconst ("myconst", loc, &type, &expr);
            ASSERT (myconst.process_declaration(er, &scope) == false);
            ASSERT (er.count () == 1);
          }; off();
        }; off();

        scenario(not_constant); {
          unit(process_declaration); {
            semantic::enter_predeclared_identifiers (&scope);
            Identifier id1 (1, "int");
            IdentifierType type (1, &id1);
            ast::Identifier id2 (1, "new");
            ast::IdentifierExpression idx (1, &id2);
            ast::ExpressionList args (1);
            ast::Identifier id3 (1, "int");
            ast::IdentifierType idtype2 (1, &id3);
            ast::TypeExpression tex (1, &idtype2);
            args.append (&tex);
            ast::Call node (1, &idx, &args);
            Constant myconst ("myconst", loc, &type, &node);
            ASSERT (myconst.process_declaration(er, &scope) == false);
            ASSERT (er.count () == 1);
          }; off();
        }; off();

        scenario(not_assignable); {
          unit(process_declaration); {
            semantic::enter_predeclared_identifiers (&scope);
            Identifier id1 (1, "int");
            IdentifierType type (1, &id1);
            semantic::Value val;
            val.present = true;
            val.untyped_float_value = 3.5;
            Literal expr (1, type::UntypedFloat::instance (), val);
            Constant myconst ("myconst", loc, &type, &expr);
            ASSERT (myconst.process_declaration(er, &scope) == false);
            ASSERT (er.count () == 1);
          }; off();
        }; off();

        scenario(sucess); {
          unit(process_declaration); {
            semantic::enter_predeclared_identifiers (&scope);
            Identifier id1 (1, "int");
            IdentifierType type (1, &id1);
            semantic::Value val;
            val.present = true;
            val.untyped_float_value = 1.0;
            Literal expr (1, type::UntypedFloat::instance (), val);
            Constant myconst ("myconst", loc, &type, &expr);
            ASSERT (myconst.process_declaration(er, &scope) == true);
            ASSERT (er.count () == 0);
            ASSERT (myconst.type () == &type::named_int);
            ASSERT (myconst.value ().present == true);
            ASSERT (myconst.value ().int_value == 1);
          }; off();
        }; off();

      }; off();


      scenario(without_type); {

        scenario(not_constant); {
          unit(process_declaration); {
            semantic::enter_predeclared_identifiers (&scope);
            EmptyType type (1);
            ast::Identifier id2 (1, "new");
            ast::IdentifierExpression idx (1, &id2);
            ast::ExpressionList args (1);
            ast::Identifier id3 (1, "int");
            ast::IdentifierType idtype2 (1, &id3);
            ast::TypeExpression tex (1, &idtype2);
            args.append (&tex);
            ast::Call node (1, &idx, &args);
            Constant myconst ("myconst", loc, &type, &node);
            ASSERT (myconst.process_declaration(er, &scope) == false);
            ASSERT (er.count () == 1);
          }; off();
        }; off();

        scenario(sucess); {
          unit(process_declaration); {
            EmptyType type (1);
            semantic::Value val;
            val.present = true;
            val.untyped_float_value = 37.5;
            Literal expr (1, type::UntypedFloat::instance (), val);
            Constant myconst ("myconst", loc, &type, &expr);
            ASSERT (myconst.process_declaration(er, &scope) == true);
            ASSERT (er.count () == 0);
            ASSERT (myconst.type () == type::UntypedFloat::instance ());
            ASSERT (myconst.value ().present == true);
            ASSERT (myconst.value ().untyped_float_value == 37.5);
          }; off();
        }; off();

      }; off();

    }; off();

  }; off();

  scope(Variable); {
    Variable symbol ("name", loc, &named_int, Immutable, Immutable);
    static_cast<Symbol&> (symbol).offset (53);

    unit(Variable); {
      ASSERT (symbol.name == "name");
      ASSERT (symbol.location == loc);
      ASSERT (symbol.type == &named_int);
      ASSERT (symbol.intrinsic_mutability == Immutable);
      ASSERT (symbol.indirection_mutability == Immutable);
    }; off();

    unit(duplicate); {
      Variable* dup = symbol.duplicate ();
      ASSERT (dup->name == "name");
      ASSERT (dup->location == loc);
      ASSERT (dup->type == &named_int);
      ASSERT (dup->intrinsic_mutability == Foreign);
      ASSERT (dup->indirection_mutability == Foreign);
      ASSERT (dup->offset () == 53);
    }; off();

    scenario(SymbolVisitor); {
      unit(accept); {
        TestVisitor<SymbolVisitor, Variable> v;
        symbol.accept (v);
        ASSERT (v.item == &symbol);
        TestDefaultVisitor<SymbolVisitor, Symbol> w;
        symbol.accept (w);
        ASSERT (w.item == &symbol);
      }; off();
    }; off();

    scenario(ConstSymbolVisitor); {
      unit(accept); {
        TestConstVisitor<ConstSymbolVisitor, Variable> cv;
        symbol.accept (cv);
        ASSERT (cv.item == &symbol);
        TestDefaultConstVisitor<ConstSymbolVisitor, Symbol> w;
        symbol.accept (w);
        ASSERT (w.item == &symbol);
      }; off();
    }; off();
  }; off();

  scope(Hidden); {
    Variable var ("name", loc, &named_int, Immutable, Immutable);
    Hidden symbol (&var, loc);

    unit(Hidden); {
      ASSERT (symbol.name == "name");
      ASSERT (symbol.location == loc);
    }; off();

    scenario(SymbolVisitor); {
      unit(accept); {
        TestVisitor<SymbolVisitor, Hidden> v;
        symbol.accept (v);
        ASSERT (v.item == &symbol);
        TestDefaultVisitor<SymbolVisitor, Symbol> w;
        symbol.accept (w);
        ASSERT (w.item == &symbol);
      }; off();
    }; off();

    scenario(ConstSymbolVisitor); {
      unit(accept); {
        TestConstVisitor<ConstSymbolVisitor, Hidden> cv;
        symbol.accept (cv);
        ASSERT (cv.item == &symbol);
        TestDefaultConstVisitor<ConstSymbolVisitor, Symbol> w;
        symbol.accept (w);
        ASSERT (w.item == &symbol);
      }; off();
    }; off();

  }; off();

  scope(Field); {
    Struct s;
    Package p;
    Field symbol (&s, &p, false, "name", loc, &type::named_int, TagSet ());

    unit(Field); {
      ASSERT (symbol.name == "name");
      ASSERT (symbol.location == loc);
      ASSERT (symbol.m_struct == &s);
      ASSERT (symbol.package == &p);
      ASSERT (symbol.is_anonymous == false);
      ASSERT (symbol.type == &type::named_int);
      ASSERT (symbol.tags == TagSet ());
    }; off();

    scenario(SymbolVisitor); {
      unit(accept); {
        TestVisitor<SymbolVisitor, Field> v;
        symbol.accept (v);
        ASSERT (v.item == &symbol);
        TestDefaultVisitor<SymbolVisitor, Symbol> w;
        symbol.accept (w);
        ASSERT (w.item == &symbol);
      }; off();
    }; off();

    scenario(ConstSymbolVisitor); {
      unit(accept); {
        TestConstVisitor<ConstSymbolVisitor, Field> cv;
        symbol.accept (cv);
        ASSERT (cv.item == &symbol);
        TestDefaultConstVisitor<ConstSymbolVisitor, Symbol> w;
        symbol.accept (w);
        ASSERT (w.item == &symbol);
      }; off();
    }; off();

  }; off();

  scope(Symbol); {

    scenario(undefined); {

      unit(process_declaration); {
        EmptyType type (1);
        Identifier id (1, "not_defined");
        IdentifierExpression idex (1, &id);
        Constant symbol ("name", loc, &type, &idex);
        ASSERT (symbol.process_declaration (er, &scope) == false);
        ASSERT (er.count () != 0);
      }; off();

    }; off();

    scenario(recursively_defined); {

      unit(process_declaration); {
        EmptyType type (1);
        Identifier id (1, "name");
        IdentifierExpression idex (1, &id);
        Constant symbol ("name", loc, &type, &idex);
        scope.enter_symbol (&symbol);
        ASSERT (symbol.process_declaration (er, &scope) == false);
        ASSERT (er.count () != 0);
      }; off();

    }; off();

    scenario(still_undefined); {

      unit(process_declaration); {
        EmptyType type (1);
        Identifier id (1, "not_defined");
        IdentifierExpression idex (1, &id);
        Constant symbol ("name", loc, &type, &idex);
        ASSERT (symbol.process_declaration (er, &scope) == false);
        ASSERT (symbol.process_declaration (er, &scope) == false);
      }; off();

    }; off();

  }; off();

}; off();
