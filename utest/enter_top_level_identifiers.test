/* -*- c++ -*- */
#include "unit_test.hpp"
#include "enter_top_level_identifiers.hpp"
#include "node.hpp"
#include "error_reporter.hpp"
#include "scope.hpp"
#include "symbol_cast.hpp"
#include "type.hpp"

using namespace semantic;

scope(semantic); {

  util::ErrorReporter er;
  decl::Scope* package_scope = new decl::Scope ();
  decl::Scope* file_scope = package_scope->open ();

  ast::Identifier id1 (1, "mytype");
  ast::Identifier id2 (1, "int");
  ast::IdentifierType identifier_type (1, &id2);
  ast::TypeDecl typedecl (1, &id1, &identifier_type);

  scenario(TypeDecl); {
    unit(enter_top_level_identifiers); {
      enter_top_level_identifiers (&typedecl, er, package_scope, file_scope);
      decl::Symbol* s = package_scope->find_local_symbol ("mytype");
      ASSERT (s != NULL);
      ASSERT (decl::symbol_cast<type::NamedType> (s) != NULL);
      ASSERT (s->state () == decl::Symbol::Declared);
    }; off();
  }; off();

  ast::IdentifierList identifiers (1);
  identifiers.append (new ast::Identifier (1, "x"));
  ast::IdentifierType type (1, &id2);
  semantic::Value sv;
  sv.present = 1;
  sv.untyped_integer_value = 1;
  ast::Literal value (1, type::UntypedInteger::instance (), sv);
  ast::ExpressionList expressions (1);
  expressions.append (&value);
  ast::ConstDecl constdecl (1, &identifiers, &type, &expressions);

  scenario(ConstDecl); {
    unit(enter_top_level_identifiers); {
      enter_top_level_identifiers (&constdecl, er, package_scope, file_scope);
      decl::Symbol* s = package_scope->find_local_symbol ("x");
      ASSERT (s != NULL);
      ASSERT (decl::symbol_cast<decl::Constant> (s) != NULL);
      ASSERT (s->state () == decl::Symbol::Declared);
    }; off();
  }; off();

  ast::Identifier funcid (1, "f");
  ast::IdentifierList parameters (1);
  ast::IdentifierList return_parameters (1);
  ast::IdentifierList body (1);
  ast::FunctionDecl functiondecl (1, &funcid, &parameters, &return_parameters, &body);

  scenario(FunctionDecl); {
    unit(enter_top_level_identifiers); {
      enter_top_level_identifiers (&functiondecl, er, package_scope, file_scope);
      decl::Symbol* s = package_scope->find_local_symbol ("f");
      ASSERT (s != NULL);
      ASSERT (decl::symbol_cast<decl::FunctionBase> (s) != NULL);
      ASSERT (s->state () == decl::Symbol::Declared);
    }; off();
  }; off();

  ast::Identifier identifier (1, "i");
  ast::Identifier init (1, "init");
  ast::IdentifierList arguments (1);
  ast::InstanceDecl instancedecl (1, &identifier, &type, &init, &arguments);

  scenario(InstanceDecl); {
    unit(enter_top_level_identifiers); {
      enter_top_level_identifiers (&instancedecl, er, package_scope, file_scope);
      decl::Symbol* s = package_scope->find_local_symbol ("i");
      ASSERT (s != NULL);
      ASSERT (decl::symbol_cast<decl::Instance> (s) != NULL);
      ASSERT (s->state () == decl::Symbol::Declared);
    }; off();
  }; off();

  ast::TopLevelDeclList decllist (1);
  decllist.append (&typedecl);
  decllist.append (&constdecl);
  decllist.append (&functiondecl);
  decllist.append (&instancedecl);

  scenario(TopLevelDeclList); {
    unit(enter_top_level_identifiers); {
      enter_top_level_identifiers (&decllist, er, package_scope, file_scope);
      ASSERT (package_scope->find_local_symbol ("mytype") != NULL);
      ASSERT (package_scope->find_local_symbol ("x") != NULL);
      ASSERT (package_scope->find_local_symbol ("f") != NULL);
      ASSERT (package_scope->find_local_symbol ("i") != NULL);
    }; off();
  }; off();

  ast::Identifier package (1, "package");
  ast::ImportDeclList imports (1);
  ast::SourceFile sourcefile (1, &package, &imports, &decllist);

  scenario(SourceFile); {
    unit(enter_top_level_identifiers); {
      enter_top_level_identifiers (&sourcefile, er, package_scope, file_scope);
      ASSERT (package_scope->find_local_symbol ("mytype") != NULL);
      ASSERT (package_scope->find_local_symbol ("x") != NULL);
      ASSERT (package_scope->find_local_symbol ("f") != NULL);
      ASSERT (package_scope->find_local_symbol ("i") != NULL);
    }; off();
  }; off();

  file_scope->close ();
  package_scope->close ();

}; off();
