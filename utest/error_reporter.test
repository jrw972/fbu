/* -*- c++ -*- */
#include "error_reporter.hpp"
#include "unit_test.hpp"

#include <sstream>

#include "location.hpp"
#include "type.hpp"

using namespace util;

static void check (const Location& loc,
                   const std::stringstream& ss,
                   const ErrorReporter& er,
                   int code)
{
  const std::string& msg = ss.str ();

  std::string loc_str;
  {
    std::stringstream x;
    x << loc.file << ':' << loc.line;
    loc_str = x.str ();
  }
  std::string code_str;
  {
    std::stringstream x;
    x << '(' << 'E' << code << ')';
    code_str = x.str ();
  }

  bool flag = er.count () == 1 && msg.find (loc_str) != std::string::npos && msg.find (code_str) != std::string::npos;
  ASSERT (flag);
}

scope(util); {
  Location loc;
  std::stringstream ss;
  ErrorReporter er (0, ss);

  scope(ErrorReporter); {

    unit(func_expects_count); {
      int code = er.func_expects_count (loc, "myfunc", 3, 4);
      check (loc, ss, er, code);
    }; off();

    unit(func_expects_arg); {
      int code = er.func_expects_arg (loc, "myfunc", 1, &type::named_int, &type::named_uint);
      check (loc, ss, er, code);
    }; off();

    scenario(unary); {
      unit(cannot_be_applied); {
        int code = er.cannot_be_applied (loc, "somefunc", &type::named_int);
        check (loc, ss, er, code);
      }; off();
    }; off();

    scenario(binary); {
      unit(cannot_be_applied); {
        int code = er.cannot_be_applied (loc, "somefunc", &type::named_int, &type::named_int);
        check (loc, ss, er, code);
      }; off();
    }; off();

    unit(not_declared); {
      int code = er.not_declared (loc, "somefunc");
      check (loc, ss, er, code);
    }; off();

    unit(hidden_symbol); {
      int code = er.hidden_symbol (loc, "somefunc");
      check (loc, ss, er, code);
    }; off();

    unit(requires_value_or_variable); {
      int code = er.requires_value_or_variable (loc);
      check (loc, ss, er, code);
    }; off();

    unit(expected_a_type); {
      int code = er.expected_a_type (loc);
      check (loc, ss, er, code);
    }; off();

    unit(leaks_pointers); {
      int code = er.leaks_pointers (loc);
      check (loc, ss, er, code);
    }; off();

    unit(parameter_is_not_foreign_safe); {
      int code = er.
        parameter_is_not_foreign_safe (loc);
      check (loc, ss, er, code);
    }; off();

    unit(expected_n_expressions); {
      int code = er.expected_n_expressions (loc, 4, 5);
      check (loc, ss, er, code);
    }; off();

    unit(cannot_convert); {
      int code = er.cannot_convert (loc, &type::named_int32, &type::named_float32);
      check (loc, ss, er, code);
    }; off();

    unit(expression_is_not_constant); {
      int code = er.expression_is_not_constant (loc);
      check (loc, ss, er, code);
    }; off();

    unit(already_declared); {
      Location previous;
      int code = er.already_declared (loc, "id", previous);
      check (loc, ss, er, code);
    }; off();

    unit(defined_recusively); {
      int code = er.defined_recursively (loc, "id");
      check (loc, ss, er, code);
    }; off();

    unit(non_integer_array_dimension); {
      int code = er.non_integer_array_dimension (loc, &type::named_string);
      check (loc, ss, er, code);
    }; off();

    unit(negative_array_dimension); {
      int code = er.negative_array_dimension (loc, -5);
      check (loc, ss, er, code);
    }; off();

    unit(not_defined); {
      int code = er.not_defined (loc, "id");
      check (loc, ss, er, code);
    }; off();

    unit(expected_a_component); {
      int code = er.expected_a_component (loc);
      check (loc, ss, er, code);
    }; off();

    unit(expected_a_pointer); {
      int code = er.expected_a_pointer (loc);
      check (loc, ss, er, code);
    }; off();

    unit(expected_immutable_indirection_mutability); {
      int code = er.expected_immutable_indirection_mutability (loc);
      check (loc, ss, er, code);
    }; off();

  }; off ();
}; off ();
