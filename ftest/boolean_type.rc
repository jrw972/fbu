#!/usr/bin/env rcgo

package ftest;

type Test component { };

func not_evaluated (flag *bool) bool {
  *flag = true;
  return true;
};

func test (num uint; desc string; status bool) {
  if status {
    println (`ok `, num, ` - `, desc);
  } else {
    println (`not ok `, num, ` - `, desc);
  };
};

init (this *Test) Main () {
  println (`1..38`);

  test (1, `literal !false`, !false == true);
  test (2, `literal !true`, !true == false);

  test (3, `literal false || false`, (false || false) == false);
  test (4, `literal false || true`, (false || true) == true);
  test (5, `literal true || false`, (true || false) == true);
  test (6, `literal true || true`, (true || true) == true);

  test (7, `literal false && false`, (false && false) == false);
  test (8, `literal false && true`, (false && true) == false);
  test (9, `literal true && false`, (true && false) == false);
  test (10, `literal true && true`, (true && true) == true);

  test (11, `literal false == false`, (false == false) == true);
  test (12, `literal false == true`, (false == true) == false);
  test (13, `literal true == false`, (true == false) == false);
  test (14, `literal true == true`, (true == true) == true);

  test (15, `literal false != false`, (false != false) == false);
  test (16, `literal false != true`, (false != true) == true);
  test (17, `literal true != false`, (true != false) == true);
  test (18, `literal true != true`, (true != true) == false);

  var f, t bool;
  f = false;
  t = true;

  test (19, `!false `, !f == true);
  test (20, `!true `, !t == false);

  test (21, `false || false`, (f || f) == false);
  test (22, `false || true`, (f || t) == true);
  test (23, `true || false`, (t || f) == true);
  test (24, `true || true`, (t || t) == true);

  test (25, `false && false`, (f && f) == false);
  test (26, `false && true`, (f && t) == false);
  test (27, `true && false`, (t && f) == false);
  test (28, `true && true`, (t && t) == true);

  test (29, `literal false == false`, (f == f) == true);
  test (30, `literal false == true`, (f == t) == false);
  test (31, `literal true == false`, (t == f) == false);
  test (32, `literal true == true`, (t == t) == true);

  test (33, `literal false != false`, (f != f) == false);
  test (34, `literal false != true`, (f != t) == true);
  test (35, `literal true != false`, (t != f) == true);
  test (36, `literal true != true`, (t != t) == false);

  var flag bool;
  flag = false;
  t && f && not_evaluated (&flag);
  test (37, `short circuit &&`, flag == false);

  flag = false;
  f || t || not_evaluated (&flag);
  test (38, `short circuit ||`, flag == false);
};

instance t Test Main ();
