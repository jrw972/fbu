// Distributed Algorithms, p. 240, 242, 246

package samples;

type Variable component {
    value int;
};

init (this *Variable) Init () {
    this.value = -1;
};

[3] reaction (this $const * Variable) Set (v int) {
    activate {
        this.value = v;
    };
};

getter (this $const * Variable) Get () int {
    return this.value;
};

type ProcessStatus int;
const PROCESS_IDLE = 0;
const PROCESS_READ = 1;
const PROCESS_WRITE = 2;
const PROCESS_DECIDE = 3;
const PROCESS_DONE = 4;

type Process component {
    status ProcessStatus;
    input int;
    output int;
    get_x pull () int;
    set_x push (v int);
    Decide push (v int);
};

init (this *Process) Init () {
    this.status = PROCESS_IDLE;
    this.input = -1;
    this.output = -1;
};

reaction (this $const * Process) initr (v int) {
    activate {
        this.input = v;
        if this.status == PROCESS_IDLE {
            this.status = PROCESS_READ;
        };
    };
};

// Read
action (this $const * Process) _read (this.status == PROCESS_READ) {
    var x int;
    x = this.get_x ();
    if x == -1 {
        activate {
            this.output = this.input;
            this.status = PROCESS_WRITE;
        };
    }
    else {
        activate {
            this.output = x;
            this.status = PROCESS_DECIDE;
        };
    };
};

// Write
action (this $const * Process) _write (this.status == PROCESS_WRITE) {
    activate set_x (this.input) {
        println (`x set to `, this.input);
        this.status = PROCESS_DECIDE;
    };
};

// Decide
action (this $const * Process) _decide (this.status == PROCESS_DECIDE) {
    activate Decide (this.output) {
        this.status = PROCESS_DONE;
    };
};

type UserStatus int;
const USER_REQUEST = 0;
const USER_WAIT = 1;
const USER_DONE = 2;

type User component {
    v int;
    status UserStatus;
    decision int;
    error bool;
    initp push (v int);
};

init (this *User) Init (v int) {
    this.v = v;
    this.status = USER_REQUEST;
    this.decision = -1;
    this.error = false;
};

// Init
action (this $const * User) _init (this.status == USER_REQUEST || this.error) {
    activate initp (this.v) {
        if !this.error {
            this.status = USER_WAIT;
        };
    };
};

// Dummy
action (this $const * User) _dummy (this.error) {
};

reaction (this $const * User) Decide (v int) {
    println (this, ` decided value is `, v);
    activate {
        if !this.error {
            if this.status == USER_WAIT {
                this.decision = v;
                this.status = USER_DONE;
            } else {
                this.error = true;
            };
        };
    };
};

type System component {
    x Variable;
    process [3]Process;
    user [3]User;
};

init (this *System) Init () {
    this.x.Init ();
    for i ... 3 {
        this.process[i].Init ();
        this.user[i].Init (i + 100);
    };
};

bind (this *System) _bind {
    for i ... 3 {
        this.process[i].get_x <- this.x.Get;
        this.process[i].set_x -> this.x.Set ... i;
        this.user[i].initp -> this.process[i].initr;
        this.process[i].Decide -> this.user[i].Decide;
    };
};

instance s System Init ();