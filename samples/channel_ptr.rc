package samples;

type Element struct
{
  value uint;
  next *Element;
};

type Queue struct
{
  head *Element;
  tail **Element;
};

func (this *Queue) Push (v uint)
{
  if this.head == nil
    {
      this.tail = &this.head;
    };

  var e *Element;
  e = new (Element);
  e.value = v;
  *this.tail = e;
  this.tail = &e.next;
};

func (this *Queue) Pop ()
{
  this.head = this.head.next;
  if this.head == nil
    {
      this.tail = &this.head;
    };
};

func (this $const * Queue) Empty () bool
{
  return this.head == nil;
};

func (this $const * Queue) Front () uint
{
  return this.head.value;
};

type Channel component
{
  queue Queue;
  receive push (message uint);
};

reaction (this $const * Channel) send (message $foreign *uint)
{
  var x uint;
  x = *message;
  activate
  {
    this.queue.Push (x);
  };
};

action (this $const * Channel) _receive (!this.queue.Empty ())
{
  activate receive (this.queue.Front ())
    {
      this.queue.Pop ();
    };
};

type System component
{
  channel Channel;
  send_count uint;
  send push (message $foreign *uint);
};

init (this *System) Initially ()
{ };

action (this $const * System) _send (this.send_count != 100)
{
  var x *uint;
  x = new (uint);
  *x = this.send_count;

  activate send (x)
  {
    println (`Sent `, this.send_count);
    this.send_count++;
  };
};

reaction (this $const * System) receive (message uint)
{
  println (`Received `, message);
};

bind (this *System) _bind {
  this.send -> this.channel.send;
  this.channel.receive -> this.receive;
};

instance s System Initially ();
