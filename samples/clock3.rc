// A version of the Clock automaton of Distributed Algorithms, p. 213.
// This implementation uses synchronous getters to increase parallelism.

const limit = 10000;

type Counter component {
  counter uint;
};

action (this $const * Counter) _tick (this.counter < limit) {
  activate {
    this.counter++;
  };
}

getter (this $const * Counter) Counter () uint {
  return this.counter;
}

type Clock component {
  counter Counter;
  flag bool;
  response push (t uint);
};

reaction (this $const * Clock) request () {
  activate {
    this.flag = true;
  };
}

action (this $const * Clock) _clock (this.flag) {
  activate response (this.counter.Counter()) {
    this.flag = false;
  };
}

type Sampler component {
  flag bool;
  counter uint;
  request push ();
};

action (this $const * Sampler) _request (!this.flag && this.counter < limit) {
  activate request () {
    this.flag = true;
  };
}

reaction (this $const * Sampler) response (t uint) {
  activate {
    this.flag = false;
    this.counter++;
  };
}

type System component {
  sampler Sampler;
  clock Clock;
};

init (this *System) Initially ()
{ }

bind (this *System) _bind {
  this.sampler.request -> this.clock.request;
  this.clock.response -> this.sampler.response;
}

instance s System Initially ();
