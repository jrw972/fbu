package samples;

func append32 (buf []byte; x uint32) []byte {
    buf = append (buf, byte ((x & 0xFF000000) >> 24));
    buf = append (buf, byte ((x & 0x00FF0000) >> 16));
    buf = append (buf, byte ((x & 0x0000FF00) >> 8));
    buf = append (buf, byte ((x & 0x000000FF) >> 0));
    return buf;
};

func append64 (buf []byte; x uint64) []byte {
    buf = append (buf, byte ((x & 0xFF00000000000000) >> 56));
    buf = append (buf, byte ((x & 0x00FF000000000000) >> 48));
    buf = append (buf, byte ((x & 0x0000FF0000000000) >> 40));
    buf = append (buf, byte ((x & 0x000000FF00000000) >> 32));
    buf = append (buf, byte ((x & 0x00000000FF000000) >> 24));
    buf = append (buf, byte ((x & 0x0000000000FF0000) >> 16));
    buf = append (buf, byte ((x & 0x000000000000FF00) >> 8));
    buf = append (buf, byte ((x & 0x00000000000000FF) >> 0));
    return buf;
};

const RESERVED = 0;
const SYMMETRIC_ACTIVE = 1;
const SYMMETRIC_PASSIVE = 2;
const CLIENT = 3;
const SERVER = 4;
const BROADCAST = 5;
const NTP_CONTROL = 6;
const PRIVATE = 7;

const V4 = 4;

type SntpMessage struct {
  leapIndicator uint8;
  versionNumber uint8;
  mode uint8;
  stratum uint8;
  poll uint8;
  precision uint8;
  rootDelay uint32;
  rootDispersion uint32;
  referenceIdentifier uint32;
  // Upper 32 bits are seconds.
  // Lower 32 bits are fractional seconds.
  reference uint64;
  originate uint64;
  receive   uint64;
  transmit  uint64;
};

// http://waitingkuo.blogspot.com/2012/06/conversion-between-ntp-time-and-unix.html
func (this *SntpMessage) initialize () {
    this.mode = CLIENT;
    this.versionNumber = V4;
    var ts timespec;
    clock_gettime (&ts);
    this.transmit = (uint64 (ts.tv_sec + 0x83AA7E80) << 32) |
                    (uint64 (float64 (ts.tv_nsec) * 1e-9 * (1 << 32)) << 0);
};

func (this *SntpMessage) serialize (buf []byte) []byte {
     buf = append (buf, ((this.mode & 0x7) << 0)
                      | ((this.versionNumber & 0x7) << 3)
                      | ((this.leapIndicator) & 0x3) << 6);
     buf = append (buf, this.stratum);
     buf = append (buf, this.poll);
     buf = append (buf, this.precision);
     buf = append32 (buf, this.rootDelay);
     buf = append32 (buf, this.rootDispersion);
     buf = append32 (buf, this.referenceIdentifier);
     buf = append64 (buf, this.reference);
     buf = append64 (buf, this.originate);
     buf = append64 (buf, this.receive);
     buf = append64 (buf, this.transmit);
     return buf;
};

func (this *SntpMessage) deserialize (buf $foreign []byte) {
     if len (buf) >= 1 {
            this.mode = buf[0] & 0x7;
            this.versionNumber = buf[0] >> 3 & 0x7;
            this.leapIndicator = buf[0] >> 6 & 0x3;
            buf = buf[1:];
     };
     if len (buf) >= 1 {
            this.stratum = buf[0];
            buf = buf[1:];
     };
     if len (buf) >= 1 {
            this.poll = buf[0];
            buf = buf[1:];
     };
     if len (buf) >= 1 {
            this.precision = buf[0];
            buf = buf[1:];
     };
     if len (buf) >= 4 {
            this.rootDelay = uint32 (buf[0]) << 24 | uint32 (buf[1]) << 16 | uint32 (buf[2]) << 8 | uint32 (buf[3]);
            buf = buf[4:];
     };
     if len (buf) >= 4 {
            this.rootDispersion = uint32 (buf[0]) << 24 | uint32 (buf[1]) << 16 | uint32 (buf[2]) << 8 | uint32 (buf[3]);
            buf = buf[4:];
     };
     if len (buf) >= 4 {
            this.referenceIdentifier = uint32 (buf[0]) << 24 | uint32 (buf[1]) << 16 | uint32 (buf[2]) << 8 | uint32 (buf[3]);
            buf = buf[4:];
     };
     if len (buf) >= 8 {
            this.reference = uint64 (buf[0]) << 56 | uint64 (buf[1]) << 48 | uint64 (buf[2]) << 40 | uint64 (buf[3]) << 32 |
                             uint64 (buf[4]) << 24 | uint64 (buf[5]) << 16 | uint64 (buf[6]) <<  8 | uint64 (buf[7]) <<  0;
            buf = buf[8:];
     };
     if len (buf) >= 8 {
            this.originate = uint64 (buf[0]) << 56 | uint64 (buf[1]) << 48 | uint64 (buf[2]) << 40 | uint64 (buf[3]) << 32 |
                             uint64 (buf[4]) << 24 | uint64 (buf[5]) << 16 | uint64 (buf[6]) <<  8 | uint64 (buf[7]) <<  0;
            buf = buf[8:];
     };
     if len (buf) >= 8 {
            this.receive = uint64 (buf[0]) << 56 | uint64 (buf[1]) << 48 | uint64 (buf[2]) << 40 | uint64 (buf[3]) << 32 |
                           uint64 (buf[4]) << 24 | uint64 (buf[5]) << 16 | uint64 (buf[6]) <<  8 | uint64 (buf[7]) <<  0;
            buf = buf[8:];
     };
     if len (buf) >= 8 {
            this.transmit = uint64 (buf[0]) << 56 | uint64 (buf[1]) << 48 | uint64 (buf[2]) << 40 | uint64 (buf[3]) << 32 |
                            uint64 (buf[4]) << 24 | uint64 (buf[5]) << 16 | uint64 (buf[6]) <<  8 | uint64 (buf[7]) <<  0;
            buf = buf[8:];
     };
};

type Timer component {
     fd FileDescriptor;
     Alarm push ();
};

init (this *Timer) Init (interval uint64) {
     this.fd = timerfd_create();
     if (interval != 0) {
          timerfd_settime(this.fd, interval);
     };
};

action (this $const * Timer) _alarm (readable(this.fd)) {
     activate Alarm () {
          var buf [8]byte;
          var r int = read(this.fd, buf[0:8]);
     };
};

type UdpMessage struct {
  host string;
  port uint16;
  msg  []byte;
};

func (this $foreign *UdpMessage) Copy () UdpMessage {
     var m UdpMessage;
     m.host = copy (this.host);
     m.port = this.port;
     m.msg = copy (this.msg);
     return m;
};

type Element struct
{
  value UdpMessage;
  next *Element;
};

type Queue struct
{
  head *Element;
  tail **Element;
};

func (this *Queue) Push (value UdpMessage)
{
  if this.head == nil
    {
      this.tail = &this.head;
    };

  var e *Element;
  e = new (Element);
  e.value = value;
  *this.tail = e;
  this.tail = &e.next;
};

func (this *Queue) Pop ()
{
  this.head = this.head.next;
  if this.head == nil
    {
      this.tail = &this.head;
    };
};

func (this $const * Queue) Empty () bool
{
  return this.head == nil;
};

func (this *Queue) Front () UdpMessage
{
  return this.head.value;
};

type UdpParticipant component {
     fd FileDescriptor;
     outQueue Queue;
     inQueue Queue;
     Receive push (msg $foreign UdpMessage);
};

reaction (this $const * UdpParticipant) Send (msg $foreign UdpMessage) {
     var m UdpMessage = msg.Copy ();
     activate {
          this.outQueue.Push (m);
     };
};

action (this $const * UdpParticipant) _send (!this.outQueue.Empty () && writable (this.fd)) {
       activate {
              var m UdpMessage = this.outQueue.Front ();
              sendto (this.fd, m.host, m.port, m.msg);
              this.outQueue.Pop ();
       };
};

action (this $const * UdpParticipant) _pre_receive (readable (this.fd)) {
       activate {
         var buf [64]byte;
         var r int = read(this.fd, buf[:]);
         var m UdpMessage;
         m.msg = copy(buf[0:r]);
         this.inQueue.Push (m);
       };
};

action (this $const *UdpParticipant) _receive (!this.inQueue.Empty ()) {
  activate Receive (this.inQueue.Front ()) {
    this.inQueue.Pop ();
  };
};

init (this *UdpParticipant) Init () {
     this.fd = udp_socket();
};

type Sntp component {
     timer Timer;
     udp UdpParticipant;
     Send push (msg $foreign UdpMessage);
};

bind (this *Sntp) _bind {
     this.timer.Alarm -> this.Alarm;
     this.Send -> this.udp.Send;
     this.udp.Receive -> this.Receive;
};

init (this *Sntp) Init () {
     this.timer.Init(60);
     this.udp.Init();
};

reaction (this $const * Sntp) Alarm () {
     var s SntpMessage;
     s.initialize ();

     var msg UdpMessage;
     //msg.host = "localhost";
     msg.host = "ntp.ubuntu.com";
     //msg.port = 7;
     msg.port = 123;
     msg.msg = s.serialize (nil);
     activate Send (msg) { };
};

reaction (this $const * Sntp) Receive (msg $foreign UdpMessage) {
    var ts timespec;
    clock_gettime (&ts);
    destination := (uint64 (ts.tv_sec + 0x83AA7E80) << 32) |
                   (uint64 (float64 (ts.tv_nsec) * 1e-9 * (1 << 32)) << 0);

    var s SntpMessage;
    s.deserialize (msg.msg);
    println ("leapIndicator = ", s.leapIndicator);
    println ("versionNumber = ", s.versionNumber);
    println ("mode = ", s.mode);
    println ("stratum = ", s.stratum);
    println ("poll = ", s.poll);
    println ("precision = ", s.precision);
    println ("rootDelay = ", s.rootDelay);
    println ("rootDispersion = ", s.rootDispersion);
    println ("referenceIdentifier = ", s.referenceIdentifier);
    println ("reference = ", s.reference);
    println ("originate = ", s.originate);
    println ("receive = ", s.receive);
    println ("transmit = ", s.transmit);
    println ("roundtrip delay = ", (destination - s.originate) - (s.transmit - s.receive));
    println ("clock offset = ", int64((s.receive - s.originate) + (s.transmit - destination)) / 2);
    //      d = (T4 - T1) - (T3 - T2)     t = ((T2 - T1) + (T3 - T4)) / 2.
};

instance s Sntp Init ();